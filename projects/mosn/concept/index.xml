<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/</link>
    <description>Recent content on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/projects/mosn/concept/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MOSN 平滑升级原理解析</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/smooth-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/smooth-upgrade/</guid>
      <description>Service Mesh 中 Sidecar 运维一直是一个比较棘手的问题，数据平面的 Sidecar 升级是常有的事情，如何在升级 Sidecar（MOSN）的时候而不影响业务，对于存量的长连接</description>
    </item>
    
    <item>
      <title>Nginx vs Envoy vs MOSN 平滑升级原理解析</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/</guid>
      <description>前言 本文是对 Nginx、Envoy 及 MOSN 的平滑升级原理区别的分析，适合对 Nginx 实现原理比较感兴趣的同学阅读，需要具备一定的网络编程知识。 平滑升级的</description>
    </item>
    
    <item>
      <title>Sidecar 模式</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/sidecar-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/sidecar-pattern/</guid>
      <description>Sidecar 模式是 Service Mesh 中习惯采用的模式，是容器设计模式的一种，在 Service Mesh 出现之前该模式就一直存在，本文将为您讲解 Sidecar 模式。 什么是 Sidecar 模式 将应用程序的功能划分为</description>
    </item>
    
    <item>
      <title>TLS 安全链路</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/tls/</guid>
      <description>本文将向您展示 MOSN 的 TLS 安全能力。 证书方案 MOSN 支持通过 Istio Citadel 的证书签发方案，基于 Istio 社区的 SDS （Secret Discovery Service）方案为 Sidecar 配置证书，支持证书</description>
    </item>
    
    <item>
      <title>核心概念</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/core-concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/core-concept/</guid>
      <description>MOSN 主要划分为如下模块，包括了网络代理具备的基础能力，也包含了 xDS 等云原生能力。 xDS（UDPA）支持 MOSN 支持云原生统一数据面 API（UDPA），</description>
    </item>
    
    <item>
      <title>流量劫持</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/traffic-hijack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/mosn/concept/traffic-hijack/</guid>
      <description>本文描述的是 MOSN 作为 Sidecar 使用时的流量劫持方案。 MOSN 作为 Sidecar 和业务容器部署在同一个 Pod 中时，需要使得业务应用的 Inbound 和 Outbound 服务请求都能够经过 Sidecar 处理。区别于 Istio 社</description>
    </item>
    
  </channel>
</rss>