<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFARPC on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/</link>
    <description>Recent content in SOFARPC on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bolt 协议</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt/</guid>
      <description>Bolt 协议一个基于 TCP 的自定义的协议，相比 HTTP 来说，性能更好，在蚂蚁金服内部，大量的 RPC 都是采用 Bolt 协议来进行通信： * 基本使用 * 调用方式 * 超时控制 * 泛化</description>
    </item>
    
    <item>
      <title>Bolt 协议基本使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt-usage/</guid>
      <description>Bolt 协议基本使用 发布服务 使用 SOFARPC 发布一个 Bolt 协议的服务，只需要增加名称为 Bolt 的 Binding 即可，不同的使用方式添加 Bolt Binding 的方式如下： XML 使用 XML 发布一个 Bolt 协议只需要</description>
    </item>
    
    <item>
      <title>Bolt 协议泛化调用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/generic-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/generic-invoke/</guid>
      <description>泛化调用提供了让客户端在不需要依赖服务端的接口情况下就能够发起调用的能力。目前 SOFARPC 的泛化调用仅支持在 Bolt 通信协议下使用 Hessian2 作为序列化协议，其他的方</description>
    </item>
    
    <item>
      <title>Bolt 协议调用方式</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/invoke-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/invoke-type/</guid>
      <description>调用方式 SOFARPC 在 Bolt 协议下提供了多种调用方式满足不同的场景。 同步 在同步的调用方式下，客户端发起调用后会等待服务端返回结果再进行后续的操作。这是 SOFARPC 的</description>
    </item>
    
    <item>
      <title>Bolt 协议超时控制</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt-timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/bolt-timeout/</guid>
      <description>超时控制 使用 Bolt 协议进行通信的时候，SOFARPC 的超时时间默认为 3 秒，用户可以在引用服务的时候去设置超时时间，又分别可以在服务以及方法的维度</description>
    </item>
    
    <item>
      <title>Dubbo 协议</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/dubbo/</guid>
      <description>SOFARPC 提供了 Dubbo 协议的支持，可以让用户非常方便地和现有的 Dubbo 的系统做对接。 * 基本使用</description>
    </item>
    
    <item>
      <title>Dubbo 协议基本使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/dubbo-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/dubbo-usage/</guid>
      <description>在 SOFARPC 中，使用不同的通信协议只要设置使用不同的 Binding 即可，如果需要使用 Dubbo 协议，只要将 Binding 设置为 Dubbo 即可。下面使用以注解的方式来例举，其他的使用方式可以</description>
    </item>
    
    <item>
      <title>H2C</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/h2c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/h2c/</guid>
      <description>SOFARPC 提供了 H2C 协议的支持，可以可以采用 H2C 协议来进行服务的发布和引用 * 基本使用</description>
    </item>
    
    <item>
      <title>H2C 协议基本使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/h2c-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/h2c-usage/</guid>
      <description>在 SOFARPC 中，使用不同的通信协议只要设置使用不同的 Binding 即可，如果需要使用 H2C 协议，只要将 Binding 设置为 H2C 即可。下面使用以注解的方式来例举，其他的使用方式可以</description>
    </item>
    
    <item>
      <title>Http 协议基本使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/http-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/http-json/</guid>
      <description>Http 协议基本使用 在 SOFARPC (非SOFABoot 环境)中，当使用Http作为服务端协议的时候，支持Json作为序列化方式，作为一些基础的测试方式使用。</description>
    </item>
    
    <item>
      <title>Hystrix 客户端熔断</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault-hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault-hystrix/</guid>
      <description>SOFARPC 已集成 Hystrix 提供熔断能力，当前提供第一个预览版。关于 Hystrix 的更多介绍可以参考 Hystrix 官方文档，Hystrix 集成能力主要由 ScienJus 提供，感谢贡献。 接下来介绍一</description>
    </item>
    
    <item>
      <title>Node跨语言调用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/node-and-java-communicate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/node-and-java-communicate/</guid>
      <description>快速上手 如果你有通过 NodeJs 调用 SOFARPC 的需求.可以按照如下的文档来开始. 安装 首先按照文档安装 https://github.com/sofastack/sofa-rpc-node 使用命令. $ npm install sofa-rpc-node --save 代码示例 暴露一个 RPC 服务，并发布到注册</description>
    </item>
    
    <item>
      <title>REST Exception</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-exception/</guid>
      <description>对于 REST，我们设计了一个 JAXRSProviderManager 管理器类。在服务端生效，生效时间为服务启动时。如果希望有一个通用的 异常处理类，用来处理REST的某中异常类型的</description>
    </item>
    
    <item>
      <title>REST 自定义 Filter</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-filter/</guid>
      <description>对于 REST，我们设计了一个 JAXRSProviderManager 管理器类。在服务端生效，生效时间为服务启动时。 com.alipay.sofa.rpc.server.rest.RestServer#registerProvider 对于用户自定义的 Filter 类，可以在初始化完成后，调用 com.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance 进行注册，其中</description>
    </item>
    
    <item>
      <title>REST 跨域</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-cors/</guid>
      <description>对于 REST，我们内置了一个跨域 Filter 的支持。 SOFARPC API 使用 对于使用 SOFARPC API 的用户，可以在 ServerConfig 中添加一个参数表明即可 Map&amp;lt;String,String&amp;gt; parameters=new HashMap&amp;lt;String, String&amp;gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,&amp;quot;abc.com,cdf.com&amp;quot;); serverConfig.setParameters(parameters); XML 方式使用 直接通过配置 com.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com 即可</description>
    </item>
    
    <item>
      <title>RESTful 协议</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful/</guid>
      <description>SOFARPC 提供了 RESTful 协议的支持，可以让用户非常方便地将一个接口通过 RESTful 的方式发布出去。 * 基本使用 * 自定义 Filter * 通用异常处理 * 集成 Swagger</description>
    </item>
    
    <item>
      <title>RESTful 协议基本使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-basic/</guid>
      <description>在 SOFARPC 中，使用不同的通信协议即使用不同的 Binding 即可，如果需要使用 RESTful 协议，只要将 Binding 设置为 REST 即可。 发布服务 在定义 RESTful 的服务接口的时候，需要采用 JAXRS 标准的注</description>
    </item>
    
    <item>
      <title>RPC 发布订阅配置</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration-common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration-common/</guid>
      <description>ProviderConfig 属性 名称 默认值 备注 id ID 自动生成 application 应用对象 空ApplicationConfig interfaceId 服务接口（唯一标识元素） 不管是普通调用和返回调用，这里都设置</description>
    </item>
    
    <item>
      <title>RPC 应用参数配置</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/application-rpc-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/application-rpc-config/</guid>
      <description>在 SOFABoot 的使用场景下，RPC 框架在应用层面，提供一些配置参数，支持的应用级别的参数配置，如端口，线程池等信息，都是通过 Spring Boot的@Config</description>
    </item>
    
    <item>
      <title>SOFABoot 方式快速入门</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started-with-sofa-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started-with-sofa-boot/</guid>
      <description>本文档将演示了如何在 SOFABoot 环境下应用 SOFARPC 进行服务的发布和引用。 您可以直接在工程下找到本文档的示例代码。注意，示例代码中需要本地安装 zookeeper 环境，如果没有</description>
    </item>
    
    <item>
      <title>SOFABoot 环境 XML 配置使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-xml/</guid>
      <description>声明 SOFABoot 的 xsd 文件：在要使用的 XML 配置文件中将头部 xsd 文件的声明设置为如下。这样就能够使用 SOFABoot 定义的 XML 元素进行开发。 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:sofa=&amp;quot;http://sofastack.io/schema/sofaboot&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://sofastack.io/schema/sofaboot http://sofastack.io/schema/sofaboot.xsd&amp;quot; default-autowire=&amp;quot;byName&amp;quot;&amp;gt; 在xml</description>
    </item>
    
    <item>
      <title>SOFABoot 环境动态 API 使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-api/</guid>
      <description>SOFABoot 为 RPC 服务的发布和引用提供了一套编程 API 方式，方便直接在代码中发布和引用 RPC 服务，与 Spring 的 ApplicationContextAware 类似，为使用编程 API 方式，首先需要实现 ClientFactoryAware 接口获取编程组件</description>
    </item>
    
    <item>
      <title>SOFABoot 环境发布订阅说明</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/rpc-config-xml-explain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/rpc-config-xml-explain/</guid>
      <description>这部分介绍在 SOFABoot 环境下,完整的 SOFARPC 服务发布与引用说明 发布服务 &amp;lt;bean id=&amp;quot;helloSyncServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;helloSyncServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncService&amp;quot; unique-id=&amp;quot;&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs registry=&amp;quot;&amp;quot; serialize-type=&amp;quot;&amp;quot; filter=&amp;quot;&amp;quot; timeout=&amp;quot;3000&amp;quot; thread-pool-ref=&amp;quot;&amp;quot; warm-up-time=&amp;quot;60000&amp;quot; warm-up-weight=&amp;quot;10&amp;quot; weight=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;sofa:binding.rest&amp;gt; &amp;lt;/sofa:binding.rest&amp;gt; &amp;lt;/sofa:service&amp;gt; 属性 名称 默认值 备注 id ID bean名 class 类 无 ref 服</description>
    </item>
    
    <item>
      <title>SOFABoot 环境注解使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-sofa-boot-annotation/</guid>
      <description>注解服务发布与服务引用 除了常规的 xml 方式发布服务外，我们也支持在SOFABoot 环境下，注解方式的发布与引用，同 xml 类似，我们有 @SofaService 和 @SofaR</description>
    </item>
    
    <item>
      <title>SOFARPC 介绍</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/overview/</guid>
      <description>项目简介 SOFARPC 是蚂蚁金服开源的一款基于 Java 实现的 RPC 服务框架，为应用之间提供远程服务调用能力，具有高可伸缩性，高容错性，目前蚂蚁金服所有的业务的相互</description>
    </item>
    
    <item>
      <title>SOFARPC 工程架构介绍</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/structure-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/structure-intro/</guid>
      <description>架构图 SOFARPC 从下到上分为两层： 核心层：包含了我们的 RPC 的核心组件（例如我们的各种接口、API、公共包）以及一些通用的实现（例如随机等负载均衡算法）</description>
    </item>
    
    <item>
      <title>SOFARPC 方式快速入门</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started-with-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started-with-rpc/</guid>
      <description>本文档将演示了如何应用 SOFARPC 进行服务的发布和引用。 本例将在本地模拟服务端启动监听一个端口并发布一个服务，客户端引用该服务进行直连调用。 您可以直接</description>
    </item>
    
    <item>
      <title>SOFATracer 链路追踪</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/sofatracer-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/sofatracer-usage/</guid>
      <description>在SOFARPC(5.4.0及之后的版本) 后的版本中，我们集成了SOFATracer的功能，默认开启，可以输出链路中的数据信息。 默认为 JSON 数据</description>
    </item>
    
    <item>
      <title>Skywalking 链路分析</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/skywalking-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/skywalking-usage/</guid>
      <description>SOFARPC 在5.4.0 及之后的版本中，已经支持 Skywalking 的链路分析的功能，用户可以根据需要进行使用，其中Skywalking 的版本 要求6.0.0-alpha</description>
    </item>
    
    <item>
      <title>优雅关闭</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/graceful-shutdown/</guid>
      <description>优雅关闭，包括两部分，一个是 RPC 框架作为客户端，一个是 RPC 框架作为服务端。 作为服务端 作为服务端的时候，RPC 框架在关闭时，不应该直接暴力关闭。在</description>
    </item>
    
    <item>
      <title>使用 Consul 作为注册中心</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-consul/</guid>
      <description>使用 Consul 作为服务注册中心需要添加如下依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ecwid.consul&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;consul-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 然后在 application.properties 中如下配置： com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500 其中后面的值为 consul 的连接地址，如果需要设置一些其他参数，也可以通过 com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1&amp;amp;b=2 进行</description>
    </item>
    
    <item>
      <title>使用 Nacos 作为注册中心</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-nacos/</guid>
      <description>SOFARPC 已支持使用 Nacos 作为服务注册中心。假设你已经根据 Nacos 的快速开始在本地部署好 Nacos Server，服务发现的端口默认设置在 8848。 在 SOFARPC 中使用 Nacos 作为服务</description>
    </item>
    
    <item>
      <title>使用 SOFARegistry 作为注册中心</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-sofa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-sofa/</guid>
      <description>SOFARPC 已支持使用 SOFARegistry 作为服务注册中心。假设你已经根据 SOFARegistry 的快速开始在本地部署好 SOFARegistry Server，服务发现的端口默认设置在 9603。 在 SOFARPC 中使用 SOFARegistry 作为服务</description>
    </item>
    
    <item>
      <title>使用 Zookeeper 作为注册中心</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-zookeeper/</guid>
      <description>使用 Zookeeper 作为服务注册中心只需要在 application.properties 中如下配置即可： com.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181 注意：考虑掉服务的实时性，以下特性暂不支持 SOFABoot RPC 也提供一个缓存文件(目前暂不支持)，当 Zookeeper 不可</description>
    </item>
    
    <item>
      <title>使用本地文件作为注册中心</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-local/</guid>
      <description>使用本地文件作为服务注册中心在 application.properties 中如下配置即可： com.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg 其中 /home/admin/registry/localRegistry.reg 就是使用的本地文件的目录。 对于 windows 用户，则以上地址类似： com.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg</description>
    </item>
    
    <item>
      <title>依赖组件版权说明</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/notice/</guid>
      <description>SOFARPC 使用了一些三方开源组件，他们分别是： 一些主要依赖： Netty under Apache License 2.0 SLF4j under the MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0 一些扩展依赖： protobuf under New BSD License</description>
    </item>
    
    <item>
      <title>单元测试与性能测试</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/test/</guid>
      <description>单元测试 单元测试例子放到自己开发的模块下。 如果依赖了第三方服务端（例如Zookeeper），请手动加入 profile。参考 registry-zookeeper 模块代码。 如果依</description>
    </item>
    
    <item>
      <title>参与贡献</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/contributing/</guid>
      <description>可以先去 发展路线 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看git官方书籍,需要阅</description>
    </item>
    
    <item>
      <title>发展路线</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/roadmap/</guid>
      <description>任务列表 部分内部已有的功能特性，待内部整理完毕后随各个迭代放出。 如果还没有实现的功能特性会列在下面的表格中，欢迎大家认领任务，参与贡献。 类型</description>
    </item>
    
    <item>
      <title>发布历史</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/release-notes/</guid>
      <description>更多参见：https://github.com/sofastack/sofa-rpc/releases</description>
    </item>
    
    <item>
      <title>基础模型</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/common-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/common-model/</guid>
      <description>消息 内部全部使用 SofaRequest 和 SofaResponse 进行传递。 如果需要转换为其它协议，那么在真正调用和收到请求的时候，转换为实际要传输的对象。 可以对 SofaRequest 和 SofaResponse 进行写操作的模块</description>
    </item>
    
    <item>
      <title>如何编译 SOFARPC 工程</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/how-to-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/how-to-build/</guid>
      <description>如何编译 安装 JDK7 及以上，Maven 3.2.5 及以上。 直接下载代码，然后执行如下命令： cd sofa-rpc mvn clean install 注意：不能在子目录（即子模块）下进行编译。因为 SOFARPC 模块太多</description>
    </item>
    
    <item>
      <title>完整配置参数</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration/</guid>
      <description>提供可以允许配置的所有参数。 * 发布订阅配置 * 预热转发配置 * 自动故障剔除配置</description>
    </item>
    
    <item>
      <title>客户端调用流程</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/client-invoke-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/client-invoke-flow/</guid>
      <description>客户端模块是一个较复杂的模块，这里包含了集群管理、路由、地址管理器、连接管理器、负载均衡器，还与代理、注册中心等模块交互。 参见：</description>
    </item>
    
    <item>
      <title>容灾恢复</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault/</guid>
      <description>包含单机故障剔除和 Hystrix 熔断。</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/faq/</guid>
      <description>咨询 Q: SOFARPC 是蚂蚁金服内部使用的版本吗？ 是的，SOFARPC 有良好的扩展接口，内部使用的版本就是在开源的版本多一些扩展实现。例如我们云上的商业版</description>
    </item>
    
    <item>
      <title>序列化协议</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/serialization/</guid>
      <description>SOFARPC 可以在使用 Bolt 通信协议的情况下，可以选择不同的序列化协议，目前支持 hessian2 和 protobuf。 默认的情况下，SOFARPC 使用 hessian2 作为序列化协议，如</description>
    </item>
    
    <item>
      <title>开发者手册</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/developer-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/developer-guide/</guid>
      <description>介绍实现架构和相关的细节介绍： * 如何编译 * 架构介绍 * 调用流程 * 基础模型 * 扩展点设计 * 版本发布 * 测试</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/getting-started/</guid>
      <description>SOFARPC 有多种编程界面，下面会对各种界面进行举例： - SOFARPC 方式 - SOFABoot 方式</description>
    </item>
    
    <item>
      <title>扩展点设计</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/extension-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/extension-loader/</guid>
      <description>ExtensionLoader 为了对 SOFARPC 各个环节的都有充足的可扩展性，SOFA-RPC定义了一套十分灵活的扩展机制，所有扩展实现都是平等的。 这套机制不管是对SOFA-RP</description>
    </item>
    
    <item>
      <title>服务发布与引用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/publish-and-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/publish-and-reference/</guid>
      <description>SOFARPC 的服务发布和引用的基本配置已经在「编程界面」章节中说明，这里主要介绍服务发布和引用的一些特性。 同一服务发布多种协议 在 SOFARPC 中，可以将同一个服务</description>
    </item>
    
    <item>
      <title>注册中心扩展指南</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-extension-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-extension-guide/</guid>
      <description>如果你要扩展一个注册中心，我们先看下注册中心的抽象类。 package com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List&amp;lt;ProviderConfig&amp;gt; configs); public abstract List&amp;lt;ProviderGroup&amp;gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public</description>
    </item>
    
    <item>
      <title>注册中心选择</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/registry-usage/</guid>
      <description>SOFABoot RPC Starter 为用户提供多种注册中心选择和方便的配置。 目前 bolt ， rest ， dubbo 都支持 Zookeeper 作为注册中心。另外 bolt ， rest 支持本地文件系统作为注册中心，该种模式一般用于测</description>
    </item>
    
    <item>
      <title>版本发布</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/version-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/version-release/</guid>
      <description>版本号 采用三位版本号，分别是主版本号、次版本号、修订版本号。例如 5.1.2。 参见: http://semver.org/lang/zh-CN/</description>
    </item>
    
    <item>
      <title>直连调用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/peer-to-peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/peer-to-peer/</guid>
      <description>SOFARPC 支持指定地址进行调用的场景。用 Java API 的使用方式如下，设置直连地址即可： ConsumerConfig&amp;lt;HelloService&amp;gt; consumer = new ConsumerConfig&amp;lt;HelloService&amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(&amp;quot;bolt://127.0.0.1:12201&amp;quot;); 用 XML 的使用方式如下： &amp;lt;sofa:reference interface=&amp;quot;com.alipay.sample.HelloService&amp;quot; id=&amp;quot;helloService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:route target-url=&amp;quot;127.0.0.1:12200&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:reference&amp;gt; 用 Annotation 的使用方式如下</description>
    </item>
    
    <item>
      <title>编程界面</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programming/</guid>
      <description>介绍几种 SOFARPC 在不同环境下的使用方式 * 非 Spring 环境 API 使用 * SOFABoot 环境 XML 配置使用 * SOFABoot 环境注解使用 * SOFABoot 环境动态 API 使用</description>
    </item>
    
    <item>
      <title>自动故障剔除</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration-fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/configuration-fault-tolerance/</guid>
      <description>自动故障剔除会自动监控 RPC 调用的情况，对故障节点进行权重降级，并在节点恢复健康时进行权重恢复。目前支持 bolt 协议。 在 SOFABoot 中，只需要配置自动故障剔除的</description>
    </item>
    
    <item>
      <title>自动故障剔除</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/fault-tolerance/</guid>
      <description>集群中通常一个服务有多个服务提供者。其中部分服务提供者可能由于网络，配置，长时间 fullgc ，线程池满，硬件故障等导致长连接还存活但是程序已经无法正常</description>
    </item>
    
    <item>
      <title>自定义线程池</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-threadpool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-threadpool/</guid>
      <description>SOFARPC 支持自定义业务线程池。可以为指定服务设置一个独立的业务线程池，和 SOFARPC 自身的业务线程池是隔离的。多个服务可以共用一个独立的线程池。 SOFARPC 要求自定义</description>
    </item>
    
    <item>
      <title>自定义路由寻址</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-router/</guid>
      <description>SOFARPC 中对服务地址的选择也抽象为了一条处理链，由每一个 Router 进行处理。同 Filter 一样， SOFARPC 对 Router 提供了同样的扩展能力。 @Extension(value = &amp;quot;customerRouter&amp;quot;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override</description>
    </item>
    
    <item>
      <title>自定义过滤器</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/custom-filter/</guid>
      <description>SOFARPC 提供了一套良好的可扩展性机制，为各个模块提供 SPI 的能力。 SOFARPC 对请求与响应的过滤链处理方式是通过多个过滤器 Filter 来进行具体的拦截处理，该部分可由用户</description>
    </item>
    
    <item>
      <title>调用重试</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/retry-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/retry-invoke/</guid>
      <description>SOFARPC 支持进行框架层面的重试策略，前提是集群模式为 FailOver（SOFARPC 默认即为 FailOver 模式）。重试只有在发生服务端的框架层面异常或者是超时</description>
    </item>
    
    <item>
      <title>负载均衡</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/load-balance/</guid>
      <description>SOFARPC 提供多种负载均衡算法，目前支持以下五种： 类型 名称 描述 random 随机算法 默认负载均衡算法。 localPref 本地优先算法 优先发现是否本机发布了该服务，如果没有再采用</description>
    </item>
    
    <item>
      <title>通信协议</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/protocol/</guid>
      <description>SOFARPC 支持不同的通信协议，目前支持 Bolt, RESTful 和 Dubbo，详细的事情请参考各个协议对应的文档： * Bolt 协议 * 基本使用 * 调用方式 * 超时控制 * 泛化调用 * 序列化</description>
    </item>
    
    <item>
      <title>链路数据透传</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/invoke-chain-pass-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/invoke-chain-pass-data/</guid>
      <description>链路数据透传 链路数据透传功能支持应用向调用上下文中存放数据，达到整个链路上的应用都可以操作该数据。 使用方式如下，可分别向链路的 request 和 response 中放入数</description>
    </item>
    
    <item>
      <title>链路追踪</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/tracing-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/tracing-usage/</guid>
      <description>默认 SOFARPC 已经集成了 SOFATracer，用户也可以使用其他的 APM 产品，如 Skywalking来实现相应的功能。详见文档： SOFATracer Skywalking 如果想要关闭 SOFARPC 的链路</description>
    </item>
    
    <item>
      <title>集成 SOFARPC RESTful 服务和 Swagger</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/restful-swagger/</guid>
      <description>从 rpc-sofa-boot-starter 6.0.1 版本开始，SOFARPC 提供了 RESTful 服务和 Swagger 的一键集成的能力。 在使用了 rpc-sofa-boot-starter 的情况下，如果想要开启 swagger 的能力，首先需要在 pom.xml 中增加 Swagger 的依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.swagger.core.v3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;swagger-jaxrs2&amp;lt;/artifactId&amp;gt;</description>
    </item>
    
    <item>
      <title>非 Spring 环境 API 使用</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/programing-rpc/</guid>
      <description>服务发布 服务发布过程涉及到三个类 RegistryConfig ，ServerConfig ，ProviderConfig 。 1. RegistryConfig RegistryConfig registryConfig = new RegistryConfig() .setProtocol(&amp;quot;zookeeper&amp;quot;) .setAddress(&amp;quot;127.0.0.1:2181&amp;quot;) RegistryConfig 表示注册中心。如上声明了服务</description>
    </item>
    
    <item>
      <title>预热权重</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/provider-warmup-weight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-rpc/provider-warmup-weight/</guid>
      <description>预热权重功能让客户端机器能够根据服务端的相应权重进行流量的分发。该功能也常被用于集群内少数机器的启动场景。利用流量权重功能在短时间内对服务端</description>
    </item>
    
  </channel>
</rss>