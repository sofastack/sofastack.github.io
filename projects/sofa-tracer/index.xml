<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFATracer on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/</link>
    <description>Recent content in SOFATracer on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DataSource 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-datasource/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 DataSource 进行埋点。 SOFATracer 2.2.0 基于标准的 JDBC 接口实现，支持对标准的数据库连接池（如 DBCP、Druid、c3p0、tomcat、H</description>
    </item>
    
    <item>
      <title>DataSource 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-datasource/</guid>
      <description>SOFATracer 对标准的 JDBC 数据源进行埋点，输出 SQL 语句执行链路数据，默认日志输出为 JSON 数据格式。 DataSource 摘要日志（datasource-client-digest.</description>
    </item>
    
    <item>
      <title>Dubbo 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-dubbo/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 Dubbo 进行埋点，本示例工程地址。 基础环境 本案例使用的各框架组件的版本如下： SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8 本案例包括三个子模块： tracer-sample-with-dubbo-consumer 服务调</description>
    </item>
    
    <item>
      <title>Dubbo 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-dubbo/</guid>
      <description>SOFATracer 集成 Dubbo 后输出请求的链路数据格式，默认为 JSON 数据格式。 Dubbo 服务消费方摘要日志（dubbo-client-digest.log） 以 JSON 格式输出的数据</description>
    </item>
    
    <item>
      <title>Functional 接口支持</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/functional-interface-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/functional-interface-support/</guid>
      <description>从 Java 8 中，Java 开始引入了各种 @FunctionalInterface 接口，以更好地支持函数式编程，通常，Java 的函数会在一个 ForkJoinPool 中执行，如果这个时候没有把 Tracer 的一些线程变量传递</description>
    </item>
    
    <item>
      <title>HttpClient 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-httpclient/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 HttpClient 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;!-- SOFATracer 依</description>
    </item>
    
    <item>
      <title>HttpClient 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-httpclient/</guid>
      <description>SOFATracer 集成 sofa-tracer-httpclient-plugin 插件后输出 HttpClient 请求的链路数据，默认为 JSON 数据格式。 HttpClient 摘要日志（httpclient-digest.log） 以 JSON 格式输出的数据，相应 key 的含</description>
    </item>
    
    <item>
      <title>OkHttp 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-okhttp/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 OkHttp 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;!-- SOFATracer 依</description>
    </item>
    
    <item>
      <title>OkHttp 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-okhttp/</guid>
      <description>SOFATracer 集成 OkHttp 后输出请求的链路数据格式，默认为 JSON 数据格式。 OkHttp 摘要日志（okhttp-digest.log） 以 JSON 格式输出的数据，相应 key 的含义解释如下</description>
    </item>
    
    <item>
      <title>OpenFeign 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-openfeign/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 Spring Cloud OpenFeign 进行埋点。 基础环境 本案例使用的各框架组件的版本如下： Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8 本案例包括两个子工程： tracer-sample-with-openfeign-provider 服务提供方 tracer-sample-with-openfeign-consumer</description>
    </item>
    
    <item>
      <title>OpenFeign 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-openfeign/</guid>
      <description>SOFATracer 集成 Spring Cloud OpenFeign 后输出请求的链路数据格式，默认为 JSON 数据格式。 Spring Cloud OpenFeign 摘要日志（feign-digest.log） 以 JSON 格式输出的数据，相应 key 的含义解</description>
    </item>
    
    <item>
      <title>RestTemplate 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-resttemplate/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 RestTemplate 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt;</description>
    </item>
    
    <item>
      <title>RestTemplate 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-resttemplate/</guid>
      <description>SOFATracer 集成 RestTemplate 后输出请求的链路数据格式，默认为 JSON 数据格式。 RestTemplate 摘要日志（resttemplate-digest.log） 以 JSON 格式输出的数据，相应 key 的</description>
    </item>
    
    <item>
      <title>SOFARPC 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-sofarpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-sofarpc/</guid>
      <description>SOFATracer 集成在 SOFARPC(5.4.0及之后的版本) 后输出链路数据的格式，默认为 JSON 数据格式，具体的字段含义解释如下： RPC 客户端 摘要日志（ rpc-c</description>
    </item>
    
    <item>
      <title>SOFATracer 介绍</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/overview/</guid>
      <description>SOFATracer 是蚂蚁金服开发的基于 OpenTracing 规范 的分布式链路跟踪系统，其核心理念就是通过一个全局的 TraceId 将分布在各个服务节点上的同一次请求串联起来。通过统一的 TraceId 将调</description>
    </item>
    
    <item>
      <title>SOFATracer 工具类</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/utils/</guid>
      <description>通过 SOFATracer 上下文获取 Span 在一次分布式链路调用过程中，在集成了 SOFATracer 的组件会产生一个 Span 并会缓存到 SOFATracer 的上下文中，这个上下文是缓存在 ThreadLocal 中的，作为使用者可以通</description>
    </item>
    
    <item>
      <title>SOFATracer 配置项</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/configuration/</guid>
      <description>应用在引入 SOFATracer 后，可以在 Spring Boot 的配置文件 application.properties 中添加相关配置项来定制 SOFATracer 的相关行为。 SOFATracer 的日志输出目录，可以在 application.properties 中配置 logging.path 的路径，那么其日志输出路径为 ${</description>
    </item>
    
    <item>
      <title>Spring MVC 埋点接入</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/usage-of-mvc/</guid>
      <description>在本文档将演示如何使用 SOFATracer 对 SpringMVC 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt;</description>
    </item>
    
    <item>
      <title>Spring MVC 日志</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-springmvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/log-format-springmvc/</guid>
      <description>SOFATracer 集成 SpringMVC 后输出 MVC 请求的链路数据格式，默认为 JSON 数据格式。 Spring MVC 摘要日志（spring-mvc-digest.log） 以 JSON 格式输出的数据，相应 key 的</description>
    </item>
    
    <item>
      <title>TraceId 和 SpanId 生成规则</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/traceid-generated-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/traceid-generated-rule/</guid>
      <description>TraceId 生成规则 SOFATracer 通过 TraceId 来将一个请求在各个服务器上的调用日志串联起来，TraceId 一般由接收请求经过的第一个服务器产生，产生规则是： 服务器 IP + 产</description>
    </item>
    
    <item>
      <title>上报数据至 Zipkin</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/report-to-zipkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/report-to-zipkin/</guid>
      <description>在本文档将演示如何使用 SOFATracer 集成 Zipkin 进行数据上报展示。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 下面的示例中将分别演</description>
    </item>
    
    <item>
      <title>发展路线</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/roadmap/</guid>
      <description>任务列表 欢迎大家领取任务参与贡献。 类型 任务 困难度 认领人及时间 计划发布时间 计划完成时间 进度 相关 issue 代码 SOFATracer 性能优化专题 高 issue 18和 issue 11 代码 SOFATracer 支持 HttpClient 中</description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/explanation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/explanation/</guid>
      <description>名词 说明 TraceId TraceId 指的是 SOFATracer 中代表唯一一次请求的 ID，此 ID 一般由集群中第一个处理请求的系统产生，并在分布式调用下通过网络传递到下一个被请求系统。 SpanId SpanId</description>
    </item>
    
    <item>
      <title>应用日志打印 traceId 和 spanId</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/print-traceid-spanid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/print-traceid-spanid/</guid>
      <description>SLF4J 提供了 MDC （Mapped Diagnostic Contexts）功能，可以支持用户定义和修改日志的输出格式以及内容。本文将介绍 SOFATracer 集成的 SLF4J MDC功能，方便用户在只</description>
    </item>
    
    <item>
      <title>异步线程处理</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/async/</guid>
      <description>线程中使用 java.lang.Runnable 如果用户在代码中通过 java.lang.Runnable 新启动了线程或者采用了线程池去异步地处理一些业务，那么需要将 SOFATracer 日志上下文从父线程传递到子线程中去，SOFA</description>
    </item>
    
    <item>
      <title>快速开始指南</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/component-access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/component-access/</guid>
      <description>SOFATracer 接入的组件列表参考：SOFATracer 介绍，在使用时请注意不同组件对应的SOFATracer 版本和 JDK 版本。 环境准备 要使用 SOFABoot</description>
    </item>
    
    <item>
      <title>手动埋点</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/flexible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/flexible/</guid>
      <description>SOFATracer 此前的埋点均是基于组件维度的埋点，用户很难在自己业务代码中进行埋点操作，或者增加自定义 tag 值来监控一些链路信息。基于此，SOFATracer</description>
    </item>
    
    <item>
      <title>自定义 Reporter</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/reporter-custom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/reporter-custom/</guid>
      <description>在使用自定义埋点组件的情况下，用户可以选择自定义 Reporter。 自定义 Reporter 实现 public class MyReporter implements Reporter { @Override public String getReporterType() { return &amp;quot;myReporter&amp;quot;; } @Override public void report(SofaTracerSpan sofaTracerSpan) { // System.out 输出 System.out.println(&amp;quot;this is my custom reporter&amp;quot;); } @Override</description>
    </item>
    
    <item>
      <title>采样模式</title>
      <link>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/sampler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/projects/sofa-tracer/sampler/</guid>
      <description>目前 SOFATracer 提供了两种采样模式，一种是基于 BitSet 实现的基于固定采样率的采样模式；另外一种是提供给用户自定义实现采样的采样模式。下面通过案例来演示如何使</description>
    </item>
    
  </channel>
</rss>