<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFABoot on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/</link>
    <description>Recent content in SOFABoot on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Application packaging</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/</guid>
      <description>Introduction To understand the usage mode of Jarslink2.0, you need to have a certain understanding of the SOFAArk framework and the packaging of Ark packages and Ark Biz packages.
To ensure the consistency of reading, here is a rough description of the packaging logic of the application&amp;rsquo;s use of Jarslink2.0. The official recommendation is to jump to the above-mentioned link to obtain the necessary background knowledge.
Jarslink2.0 requires an application type of Spring Boot or SOFABoot.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-structure/</guid>
      <description>﻿## Architecture diagram Jarslink 2.0 is an Ark plugin and needs to depend on the SOFAArk container at runtime. Jarslink 2.0 is in the middle layer between the applications and the containers at runtime. Boundary interaction mode: + 1. Application boundaries: Jarslink 2.0 configures export classes that can be directly used by the applications. Such classes are loaded by Jarslink at runtime. + 2. Container boundaries: The Ark plugin can interact with the SOFAArk container by using the exposed extension points and services.</description>
    </item>
    
    <item>
      <title>Ark Biz</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-biz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-biz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ark JAR package</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-jar/</guid>
      <description>﻿This section will introduce the directory structure of standard Ark package and how to use the maven plugin of sofa-Ark-maven-plugin to package and release an Ark package.
Maven plugin The officially provided Maven plugin sofa-Ark-maven-plugin can package common Java projects or Spring Boot projects into standard-format Ark packages. Based on Fat Jar technology, we can directly start an Ark package with the java -jar command. The Maven plugin coordinates are:</description>
    </item>
    
    <item>
      <title>Ark Plugin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin/</guid>
      <description>﻿This section will introduce the standard specifications and directory structure of Ark Plugin and how to use the maven plugin of sofa-ark-plugin-maven-plugin to package and release it.
Plugin Specifications A standard Ark Plugin should meet the following specifications:
 The plugin should have a name (default is ${artifactId}). At runtime, duplicate names are not allowed. In other words, the name will be used as the unique ID of Ark Plugin;</description>
    </item>
    
    <item>
      <title>Ark container class loading mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-classloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-classloader/</guid>
      <description>Ark container class loading mechanism The plugins and business modules are managed in the Ark container. The following figure describes the class loading mechanism:
Class loading mechanism of Ark container Each Ark plugin has a separate classloader which loads a class in the following order:
 If byte codes generated by reflection are loaded, the system will throw a ClassNotFoundException to terminate the loading process. This primarily comes from our engineering practice: to avoid long time searches for the classes that can never be found.</description>
    </item>
    
    <item>
      <title>Ark container plugin mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-plugin/</guid>
      <description>Starting an Ark plug-in Ark provides the interface for starting a plug-in com.alipay.sofa.ark.spi.service.PluginActivator. The definition of the interface is as follows:
public interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; }  Once a plug-in implements this interface, and the activator attribute is configured in MANIFEST.</description>
    </item>
    
    <item>
      <title>Ark container startup process</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-startup/</guid>
      <description>Ark container start process The startup process of the Ark container is illustrated as follows:
ArkService Ark Service is a service in the Ark container. The underlying layer uses Guice to manage the service. The service is provided with the lifecycle interface com.alipay.sofa.ark.spi.service.ArkService
public interface ArkService { /** * Ark Service init * @throws ArkException */ void init() throws ArkException; /** * Ark Service dispose * @throws ArkException */ void dispose() throws ArkException; }  After the service implements the preceding lifecycle interface, the Ark Service container invokes the interface when it starts and stops.</description>
    </item>
    
    <item>
      <title>Basic model</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-model/</guid>
      <description>﻿## Model
Applications Jarslink manages the life cycle of multiple applications. During runtime dynamic deployment, it usually converts a Jar file entity into an abstract model Biz. + Biz: abstract model of the application at runtime
Instruction Currently, Jarslink supports the telnet protocol and accepts the entered instructions. In the future, it will also support instruction execution through APIs. Acceptable instruction types: + InstallCommand: install the application + UninstallCommand: uninstall the application + CheckCommand: check the application state + SwitchCommand: switch the application state</description>
    </item>
    
    <item>
      <title>Communicate across applications</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/</guid>
      <description>Project address
 Introduction During merged deployment, Biz packages can communicate with each other by releasing and referencing JVM services apart from using the RPC framework. This sample project is intended to demonstrate how two Biz packages communicate by JVM services.
Within the biz-jvm-invocation-sample project, there are three sub-projects whose functions are as follows: + facade: A common Java module that defines the SampleJvmService interface.
package me.qlong.tech.service; public interface SampleJvmService { String service(); }   app-one: A SOFABoot Web application that defines a simple rest request and use the @SofaReference annotation to reference the SampleJvmService.</description>
    </item>
    
    <item>
      <title>Compile Jarslink project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-compile/</guid>
      <description>How to compile  Install JDK7 and above, and Maven 3.2.5 and above.
 Directly download the code and then execute the following command:
cd sofa-jarslink mvn clean install  Note: you cannot compile the code under a sub-directory (i.e., sub-module). Since there are many modules, the configuration is restricted to the root directory only to avoid repetitive configuration of some packaging plugins such as the formatting plugin and License plugin.</description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-contribution/</guid>
      <description>You can visit Development Route first to learn more about development tasks and future planning.
 Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.
 Refer to the Git official books for the Git tool usage. The first few chapters will help you get a quick start. Read Git collaboration process through  GitHub Code Contribution Process Submitting an issue Whether you want to fix a bug of SOFAArk or add a new feature of SOFAArk, you have to submit an issue to describe your demand before you submit the code on GitHub address in SOFAArk.</description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-contribution/</guid>
      <description>You can go into the development route to learn more about development tasks and future planning.
 Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.
 For the use of git tools, refer to official books on git and get familiarized by reading the first few chapters. For the git collaboration process, refer to the article named Git Collaboration Process.</description>
    </item>
    
    <item>
      <title>Create a SOFABoot application</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/</guid>
      <description>Project address
 Introduction Jarslink 2.0 is available for both Spring Boot and SOFABoot; we just need to add the specified dependencies. To be convenient, it is recommended to use Jarslink 2.0 in the form of SOFABoot projects. This sample project is intended to demonstrate how to quickly reform a Spring Boot project into a SOFABoot project.
Reform After creating a Spring Boot project in the official Spring Boot website, we only need to introduce the SOFABoot dependencies.</description>
    </item>
    
    <item>
      <title>Dependency management</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/dependency-management/</guid>
      <description>﻿SOFABoot is based on Spring Boot. It means SOFABoot manages SOFA middleware dependencies and provides the Starter for Spring Boot, facilitating the use of SOFA middleware in Spring Boot.
SOFABoot dependency management You must load SOFABoot&amp;rsquo;s management dependencies before using SOFA middleware. In a way similar to use Spring Boot, add the configuration tag &amp;lt;parent/&amp;gt; in the project settings:
&amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofaboot-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sofa.boot.version}&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt;  Where ${sofa.boot.version} represents the SOFABoot version (refer to release history).</description>
    </item>
    
    <item>
      <title>Health check</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/health-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/health-check/</guid>
      <description>SOFABoot provides Readiness Check to enhance Spring Boot&amp;rsquo;s Health Check. If you need to use the SOFA middleware, you are advised to use the Health Check extension of SOFABoot to launch application examples in a more elegant way.
Enable Health Check To enable the Health Check feature in SOFABoot, you only need to import the following starter:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;healthcheck-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Without the Health Check extension, users still can perform Liveness Check with native Spring Boot Actuator directly relying on the HealthIndicator interface.</description>
    </item>
    
    <item>
      <title>Integrate SOFABoot health check</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/</guid>
      <description>Project address
 Introduction SOFABoot extends the Health Check of Spring Boot. For detailed information, see SOFABoot Documentation. This sample project is intended to demonstrate how to integrate the Health Check component of SOFABoot during merged deployment. Differences between the Health Check in merged deployment and that of a single SOFABoot application are as follows: + During static merged deployment, all Biz packages must pass the Health Check before the Ark package can be started normally.</description>
    </item>
    
    <item>
      <title>Interactive instruction</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/</guid>
      <description>Jarslink2.0 supports receiving dynamic commands at runtime to manage the Biz package lifecycle. Before starting an Ark package that has introduced the Jarslink2.0 plugin, you can send commands through the telnet connection protocol with port 1234. For example, execute telnet ip 1234 to enter the Jarslink2.0 command interface and type &amp;ldquo;help&amp;rdquo; in the interface to obtain all relevant command manuals. Next we will introduce the syntax of each Jarslink2.0 command.</description>
    </item>
    
    <item>
      <title>Introduction to Jarslink</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/</guid>
      <description>Introduction Jarslink2.0 is a functional SOFABoot plugin developed based on SOFAArk. It manages the merged deployment of multiple applications on top of the SOFAArk container, with the following features: + It supports runtime dynamic installation and uninstallation of applications. + It supports runtime application hot replacement capability to ensure service continuity. + For cross-application communication, it supports the JVM services publish and reference. Cross-application communication can base on RPC framework or internal JVM services.</description>
    </item>
    
    <item>
      <title>Introduction to SOFAArk</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-readme/</guid>
      <description>﻿## Product description SOFAArk is a light-weight，java based classloader isolation framework open sourced by Ant Financial. Based on Fat Jar technology, the container can pack simple single-module Java applications or Spring Boot applications into a self-contained executable Fat Jar, known as an Ark package. When the java -jar command is used to start an Ark package embedded with the SOFAArk class isolation container, the SOFAArk container will start, and it then starts each Ark plugin and application.</description>
    </item>
    
    <item>
      <title>Lifecycle</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/</guid>
      <description>In the Interactive Instructions section, we have described the set of instructions that Jarslink2.0 supports. In this section, we will focus on all the possible state transitions behind these instructions in the following diagram of a Biz package being loaded from a static file to the runtime and to being uninstalled.
The diagram above basically shows the complete life cycle of a Biz package. Now we will explain the direction of each state transition in the diagram:</description>
    </item>
    
    <item>
      <title>Merged deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/</guid>
      <description>In Jarslink 2.0, merged deployment refers to loading and running multiple Biz packages in the same JVM. In the section Application Packaging, we have described the relationship between the Spring Boot/SOFABoot application and the Biz package. We may think that merged deployment here refers to loading and running multiple Spring Boot/SOFABoot applications in the same JVM.
It is mentioned at the end of Application Packaging that a Biz package can be released to a remote repository through the mvn deploy command, similar to releasing common Jar packages.</description>
    </item>
    
    <item>
      <title>Modular development</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/modular-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/modular-development/</guid>
      <description>Since version 2.4.0, SOFABoot has started to support modular development capability based on Spring context isolation. To better understand the concept of modular development of SOFABoot, let&amp;rsquo;s distinguish several common forms of modularization:
 Modularization based on code organization: This is the most common form. Codes with different functions are placed under different Java projects at development time and into different jar packages at compile time. At runtime, all Java classes are under the same classpath without any isolation; Modularization based on Spring context isolation: Use the Spring context to perform isolation of different function modules.</description>
    </item>
    
    <item>
      <title>Module configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-module/</guid>
      <description>The SOFABoot module combines a regular JAR with some SOFABoot-specific configurations, which enables a JAR to be identified by SOFABoot and modularized.
There are two differences between a complete SOFABoot module and a regular JAR:
 A SOFABoot module contains a sofa-module.properties file, where the name and the dependencies of the module are defined. We can place one or more Spring configuration files in the SOFABoot module&amp;rsquo;s META-INF/spring directory; and SOFABoot will automatically load them as Spring configurations for that module.</description>
    </item>
    
    <item>
      <title>Module parallel startup</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/parallel-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/parallel-start/</guid>
      <description>SOFABoot will calculate the dependency tree based on the Require-Module. For example, the following dependency tree represents that Modules B and C depend on Module A, Module E depends on Module D, and Module F depends on Module E:
The dependency tree guarantees that Module A starts before Modules B and C, Module D before Module E, and Module E before Module F, but without defining the start orders between Modules B and C, or Modules B, C and Modules D, E and F, which can start either in serial or parallel.</description>
    </item>
    
    <item>
      <title>Package into Ark JAR</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-demo/</guid>
      <description>Introduction This sample project shows how to build an executable-ark-jar based on a springboot project with the tool of sofa-ark-maven-plugin.
Preparation As this project depends on the ark-plugin generated by the project of sample-ark-plugin, please ensure the sample sample-ark-plugin installed in your local maven repository before run this project.
Tools The Maven plugin of sofa-ark-maven-plugin is provided to build a standard executable-ark-jar, and just needs some simple configurations. Its maven coordinates is:</description>
    </item>
    
    <item>
      <title>Package into Ark Plugin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/</guid>
      <description>Introduction This sample project demonstrates how to use Maven plugins to package a general Java project into an Ark plugin that meets the standard specifications.
Background In actual development, dependency conflicts often occur. Suppose we have developed a class library named sample-lib, and it might conflict with the existing dependencies when the business application is imported. At this point, we hope the library can be isolated from other business dependencies, without negotiating with each other over dependency package versions.</description>
    </item>
    
    <item>
      <title>Publish and reference JVM services</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/module-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/module-service/</guid>
      <description>﻿SOFABoot provides developers with three ways to publish and reference JVM services
 XML Annotation Programming API  XML Service Publish First, we need to define a Bean:
&amp;lt;bean id=&amp;quot;sampleService&amp;quot; class=&amp;quot;com.alipay.sofa.runtime.test.service.SampleServiceImpl&amp;quot;&amp;gt;  Then, publish the Bean as a SOFA JVM service by using the Spring extension tag provided by SOFA.
&amp;lt;sofa:service interface=&amp;quot;com.alipay.sofa.runtime.test.service.SampleService&amp;quot; ref=&amp;quot;sampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.jvm/&amp;gt; &amp;lt;/sofa:service&amp;gt;  In the preceding configuration, the interface parameter indicates the interface for releasing services, and the ref parameter indicates the Bean to be published as a JVM service.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/quick-start/</guid>
      <description>﻿In this document, we will create a Spring Boot project and introduce the basic dependencies of SOFABoot as well as its Health Check expansion capability, to demonstrate how to get started quickly with SOFABoot.
Environment Preparation To use SOFABoot, we need to prepare the basic environment first. SOFABoot depends on the following environment: - JDK7 or JDK8 - Needs to be compiled with Apache Maven 3.2.5 or above
Create Project SOFABoot is directly built on Spring Boot, so it can be generated by Spring Boot Generators.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-release/</guid>
      <description>Release history For more information, refer to: https://github.com/sofastack/sofa-ark/releases</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-release/</guid>
      <description>﻿## Release history For more information, refer to: https://github.com/sofastack/sofa-jarslink/releases</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SOFABoot 2.5.x upgrade</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_2_5_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_2_5_x/</guid>
      <description>﻿# Upgrade SOFABoot from 2.3.x/2.4.x to 2.5.x SOFABoot 2.3.x/2.4.x is developed based on Spring Boot 1.4.2.RELEASE, SOFABoot 2.5.x is developed based on Spring Boot 1.5.x. When upgrading SOFABoot 2.3.x/2.4.x to SOFABoot 2.5.x, we should pay special attention to the differences between the Spring Boot 1.5.x upgrade and the Spring Boot 1.4.x upgrade.
Renamed Spring Boot Starters  spring-boot-starter-ws &amp;ndash;&amp;gt; spring-boot-starter-web-services spring-boot-starter-redis &amp;ndash;&amp;gt; spring-boot-starter-data-redis  Endpoint Security Control Spring Boot 1.</description>
    </item>
    
    <item>
      <title>SOFABoot 3.0 upgrade</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_3_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_3_x/</guid>
      <description>﻿## Preface As a Spring Boot-based development framework open sourced by Ant Financial, SOFABoot provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.
We have received a lot of feedback from community users since SOFABoot was open sourced in April 2018. We are also very pleased to see many community users take an active part in building the SOFAStack open source, which greatly increases our determination to prosper SOFAStack community and ecosystem.</description>
    </item>
    
    <item>
      <title>SOFABoot Extension Point</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/extension/</guid>
      <description>SOFABoot supports modular isolation. But in actual usage scenarios, There is one case that beans in one module sometimes need to open some entries for another module to expand. SOFABoot draws on and uses the Nuxeo Runtime project and the nuxeo project and expands on it, provides the ability to extend points with Spring, We call it Extension Point. Usage Using extension point capabilities in SOFABoot requires the following three</description>
    </item>
    
    <item>
      <title>SOFABoot overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/overview/</guid>
      <description>SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.
You can view all the release notes in Release History. The correspondence between SOFABoot version and Spring Boot version is as follows:</description>
    </item>
    
    <item>
      <title>SOFABoot profile</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-profile/</guid>
      <description>﻿Since 3.1.X Spring framework has started to support the profile function: Bean Definition Profiles, SOFABoot support modular-level profiling, it will determine whether a module can be started when each module is getting started.
Activating Module Using Module-Profile To enable the SOFABoot profiling, we need to add the com.alipay.sofa.boot.active-profiles field in the application.properties file. The value of this field is a comma-separated string denoting a list of profiles allowed to be activated.</description>
    </item>
    
    <item>
      <title>Terminologies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-terminology/</guid>
      <description>Ark package The Executed Fat Jar that meets the specific directory format requirements can use the officially provided Maven plug-in (sofa-Ark-maven-plugin) to package the engineering application into a standard-format Ark package. Start the application on top of the SOFAArk container with the java -jar command. The Ark package usually contains the Ark Container, Ark Plugin dependency (if any), merged deployed Ark Biz (if any), and the Ark Biz of the application itself.</description>
    </item>
    
    <item>
      <title>Use Jarslink for multi-application dynamic deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/</guid>
      <description>Introduction This section is intended to demonstrate how to use Jarslink 2.0 to dynamically control the life cycle of the Biz package and to complete its installation, uninstallation, and query.
Demo With reference to How to reform common Spring Boot applications, the reformed spring-boot-transform-sample project has integrated the Jarslink 2.0 component. By executing the Ark package that the application packaged and generated, you can dynamically install or uninstall the application during its running.</description>
    </item>
    
    <item>
      <title>Use class isolation in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/classloader-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/classloader-isolation/</guid>
      <description>SOFABoot provides a class isolation framework SOFAArk, giving Spring Boot a class isolation ability to resolve class or package conflicts in the development. For detailed information, please refer to:SOFAArk
To use this feature in SOFABoot projects, we need only two steps: configure the sofa-ark-maven-plugin plugins for packaging and add sofa-ark-springboot-starter dependencies of the class isolation framework.
Configure Maven packaging plugins The Maven plugins - sofa-ark-maven-plugin are available on the Central Repository.</description>
    </item>
    
    <item>
      <title>Version release</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-version/</guid>
      <description>﻿## Version release
Version No. Major, minor, and revision version numbers are used. For example 2.0.0.
Refer to: http://semver.org/lang/zh-CN/.
 Major version number: All versions within a major version number must be compatible with each other. They are not necessarily compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, more features it has. Revision version number: represents the BugFix version.</description>
    </item>
    
    <item>
      <title>View version</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/view-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/view-versions/</guid>
      <description>﻿With SOFABoot, we can directly view the version of SOFA middleware and other detailed information in the browser.
Introducing SOFABoot Infra Dependency To view the version information of the SOFA middleware directly in the browser in SOFABoot, all you need to do is add the following to the Maven dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;infra-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Version Information Viewing After an application started successfully, you can visit http://localhost:8080/sofaboot/versions in the browser to view the version information of the SOFA middleware, the response such as:</description>
    </item>
    
  </channel>
</rss>