<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFARegistry on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/</link>
    <description>Recent content in SOFARegistry on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Client usage</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/client-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/client-quick-start/</guid>
      <description>1. Create a Maven project After deploying the servers, we can create a new Maven project to use services provided by SOFARegistry. Create a new Maven project, and then import the following dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  2. Publish data // Create a client instance. RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(&amp;quot;127.0.0.1&amp;quot;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); // Create a publisher registry. String dataId = &amp;quot;com.alipay.test.demo.service:1.0@DEFAULT&amp;quot;; PublisherRegistration registration = new PublisherRegistration(dataId); // Register the registry with the client and publish data.</description>
    </item>
    
    <item>
      <title>Copyright statement</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/notice/</guid>
      <description>Copyright statement of dependent components SOFARegistry uses some third-party open-source components, including but not limited to:
 Spring under Apache 2.0 license Spring Boot under Apache 2.0 license Netty under Apache License 2.0 SLF4j under the MIT License jersey under CDDL Version 1.1
 SOFAJRaft under Apache License 2.0 SOFABolt under Apache License 2.0 SOFAHessian under Apache License 2.0  If you find anything we have missed, please let us know.</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/deployment/</guid>
      <description>1. Environment preparation To use SOFARegistry, you need to prepare the basic environment first. SOFARegistry depends on the following environment:
 Linux, UNIX, Mac are supported. JDK8 Compile it with Apache Maven 3.2.5 or later versions.  2. Resource Quota -cpu: 4c -memory: 8G -disk: 50G
3. Two deployment modes  Integrated deployment  Package and integrate the three roles of meta, data, and session into one jvm, which can be deployed on a standalone machine or a cluster.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/contributing/</guid>
      <description>We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.
 Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of git tools, refer to official books on gitand get familiarized by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFARegistry bug or adding a SOFARegistry feature, submit an issue on the SOFARegistry GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>Java SDK</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/java-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/java-sdk/</guid>
      <description>1. Create a Maven project and import the dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  2. Create the SOFARegistry client instance The key code for creating the SOFARegistry client instance is as follows:
RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(&amp;quot;127.0.0.1&amp;quot;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init();  Properties related to SOFARegistry are specified by the DefaultRegistryClientConfigBuilder class, which provides the following key properties:
public class DefaultRegistryClientConfigBuilder { private String instanceId; private String zone = DEFAULT_ZONE; private String registryEndpoint; private int registryEndpointPort = 9603; private String dataCenter = DEFAULT_DATA_CENTER; private String appName; private int connectTimeout = 3000; private int socketTimeout = 3000; private int invokeTimeout = 1000; private int recheckInterval = 500; private int observerThreadCoreSize = 5; private int observerThreadMaxSize = 10; private int observerThreadQueueLength = 1000; private int syncConfigRetryInterval = 30000; }     Property Type Description     instanceId String The ID of the instance.</description>
    </item>
    
    <item>
      <title>Management commands</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/management-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/management-api/</guid>
      <description>1. registry-meta 1.1 Push switch When publishing new SOFARegistry versions, to minimize the impact on services, and avoid large amounts of push messages caused by large-scale service endpoint changes during the server restart process, we will temporarily turn off the push service at the management layer. After publishing the new SOFARegistry version, we can turn on the push service and restore the normal working conditions. Data subscription and service publication information generated for the period when the push service is turned off will be subject to global push for compensation.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-notes/</guid>
      <description>For more information, see https://github.com/sofastack/sofa-registry/releases.</description>
    </item>
    
    <item>
      <title>Roadmap and task claims</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/roadmap/</guid>
      <description>Roadmap Tasks We have some internal implementations of some new features, which will be released along with the iterations when sorted out.
Features that are not implemented yet are listed in the following table. We encourage you to claim the tasks and contribute to SOFARegistry.
   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document Document Translation Low       Code Support for Spring Cloud Medium       Code Data self-check High       Code Blacklist filtering Medium       Code SOFARegistry Dashboard High       Code Support for other microservice frameworks Medium       Code Support for Docker &amp;amp; Kubernetes High       Code Multi-language client support High        Version iteration plan v5.</description>
    </item>
    
    <item>
      <title>SOFARegistry overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/overview/</guid>
      <description>Product introduction SOFARegistry is a production-level, low-latency, and highly available service registry powered by Ant Financial. SOFARegistry was developed on the basis ConfigServer of Taobao. After more than ten years of business development of Ant Financial, SOFARegistry has evolved into the fifth generation architecture. Currently, SOFARegistry not only provides full support to Ant Financial and its numerous partners, but also embraces the open source community. Built on an AP architecture, SOFARegistry support s message push in seconds.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/scale/</guid>
      <description>1. Integrated deployment 1.1 Scale up registry-integration Assume that three registry-integration servers have been deployed currently, which are namely node1, node2, and node 3. The new node to be added to the cluster is node 4.
Operation steps:
Step 1. Deploy the new registry-integration node
First, deploy registry-integration.tgz on node4 by referencing the Deployment topic. Note that you need to set the nodes.metaNode configuration item on node4 to a 4-server endpoint list:</description>
    </item>
    
    <item>
      <title>Server deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/server-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/server-quick-start/</guid>
      <description>Local development Starting SOFARegistry locally is to use the H2 database as the configuration database used by the registry, which can be started directly com.alipay.sofa.registry.server.integration.RegistryApplication#main
By default, application-dev.properties will be used as the configuration file
Deployment The deployment of SOFARegistry relies on mysql, which uses mysql as the metadata storage of the registry itself SOFARegistry supports two types of deployment modes, which are integrated deployment and independent deployment. This topic describes the simplest integrated single-node deployment.</description>
    </item>
    
    <item>
      <title>Terminology</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/terminology/</guid>
      <description>General terminology    Term Description     Service A software function provided over the network with specific business logic processing capabilities.   Service provider A computer node that provides services over the network.   Service consumer A computer node that receives services through the network. The same computer node can both be the service provider of some services and the service consumer of others.</description>
    </item>
    
    <item>
      <title>Version rules</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-standard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-standard/</guid>
      <description>Version number SOFARegistry uses a three-digit version number in the form of major, minor, and patch. For example, 5.2.0.
For more information, see https://semver.org/.
 Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has.</description>
    </item>
    
  </channel>
</rss>