<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFARPC on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/</link>
    <description>Recent content in SOFARPC on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic model</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/common-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/common-model/</guid>
      <description>Messages All messages are internally passed through SofaRequest and SofaResponse.
To convert to other protocols, you need to transform the messages to the objects that are to be actually transferred when calling and receiving requests.
The modules that can write SofaRequest and SofaResponse are as follows:
 Invoker Filter ServerHandler Serialization  The modules that can only read message bodies are as follows:
 Cluster Router LoadBalance  Logs The log initialization is based on the extension mechanism.</description>
    </item>
    
    <item>
      <title>Basic usage of Bolt protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-usage/</guid>
      <description>Publish Service To use SOFARPC to publish a Bolt-protocol service, you only need to add a Binding named bolt. The ways to add Bolt Binding are as follows:
XML To publish a Bolt service using XML, simply add the &amp;lt;sofa:binding.bolt&amp;gt; tag to the &amp;lt;sofa:service&amp;gt; tag:
&amp;lt;sofa:service ref=&amp;quot;sampleService&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.sample.SampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt/&amp;gt; &amp;lt;/sofa:service&amp;gt;  Annotation To publish a Bolt service using Annotation, you only need to set the bindingType of @SofaServiceBinding to bolt:</description>
    </item>
    
    <item>
      <title>Basic usage of Dubbo protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo-usage/</guid>
      <description>In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the Dubbo protocol, just set Binding to Dubbo. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.
Publish Service To publish a Dubbo service, just set the bindingType of @SofaServiceBinding to dubbo:
@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = &amp;quot;dubbo&amp;quot;)}) public class SampleServiceImpl implements SampleService { }  Reference Service To reference a Dubbo service, just set the bindingType of @SofaReferenceBinding to dubbo:</description>
    </item>
    
    <item>
      <title>Basic usage of H2C protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c-usage/</guid>
      <description>In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the H2C protocol, just set Binding to H2C. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.
Publish Service To publish an H2C service, just set the bindingType of @SofaServiceBinding to h2c:
@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = &amp;quot;h2c&amp;quot;)}) public class SampleServiceImpl implements SampleService { }  Reference Service To reference a H2C service, just set the bindingType of @SofaReferenceBinding to h2c:</description>
    </item>
    
    <item>
      <title>Basic usage of HTTP protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http-json/</guid>
      <description>In SOFARPC (Not In SOFABoot/SpringBoot)，when use Http as a protocol of server，we can use Json as the way of serialization，for some basic test scenes.
SOFARPC API Usage Service Publish ServerConfig serverConfig = new ServerConfig() .setStopTimeout(60000) .setPort(12300) .setProtocol(RpcConstants.PROTOCOL_TYPE_HTTP) .setDaemon(true); ProviderConfig&amp;lt;HttpService&amp;gt; providerConfig = new ProviderConfig&amp;lt;HttpService&amp;gt;() .setInterfaceId(HttpService.class.getName()) .setRef(new HttpServiceImpl()) .setApplication(new ApplicationConfig().setAppName(&amp;quot;serverApp&amp;quot;)) .setServer(serverConfig) .setUniqueId(&amp;quot;uuu&amp;quot;) .setRegister(false); providerConfig.export();  Service Consume Because of the Http+Json，So users can use HttpClient to start a normal call, this is a piece of code in test.</description>
    </item>
    
    <item>
      <title>Basic usage of RESTful protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-basic/</guid>
      <description>In SOFARPC, using different communication protocols is equal to using different Bindings. If you need to use the RESTful protocol, just set Binding to REST.
Publish Service When defining a RESTful service interface, you need to add meta information to the interface using the annotations in JAXRS standard, such as the following interface:
@Path(&amp;quot;sample&amp;quot;) public interface SampleService { @GET @Path(&amp;quot;hello&amp;quot;) String hello(); }   The annotations in JAXRS standard can be found in RESTEasy documentation.</description>
    </item>
    
    <item>
      <title>Bolt protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt/</guid>
      <description>Bolt protocol is a TCP-based custom protocol that performs better than HTTP. Within Ant Financial, a large number of RPCs use the Bolt protocol to communicate: * Basic usage * Calling type * Timeout control * Generic call * Serialization protocol * Custom thread pool</description>
    </item>
    
    <item>
      <title>Calling type</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-type/</guid>
      <description>SOFARPC provides a variety of calling types under the Bolt protocol to meet different scenarios.
Synchronous In the synchronous calling type, after the client initiates a call, it will wait for the server to return the result and then perform subsequent operations. This is the default calling type of SOFARPC.
Asynchronous In the asynchronous calling type, after the client initiates a call, it will not wait for the result from the server but continue to execute the subsequent business logic.</description>
    </item>
    
    <item>
      <title>Client call flow</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/client-invoke-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/client-invoke-flow/</guid>
      <description>The client module is a complex module which contains cluster, router, address holder，connection holder, and load balancer, and interacts with proxy, registry center and other modules.
See the following flow chart:</description>
    </item>
    
    <item>
      <title>Communication protocols</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/protocol/</guid>
      <description>SOFARPC supports different communication protocols and currently supports Bolt, RESTful and Dubbo. For details, please refer to the corresponding document of each protocol: * Bolt Protocol * Basic usage * Calling type * Timeout control * Generic call * Serialization protocol * Custom thread pool * RESTful * Basic usage * Custom filter * Integrate Swagger * Dubbo * Basic usage * H2C * Basic usage</description>
    </item>
    
    <item>
      <title>Compile SOFARPC project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/how-to-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/how-to-build/</guid>
      <description>Install JDK7 or later and Maven 3.2.5 or later.
 Download the codes directly and execute the following commands:
cd sofa-rpc mvn clean install  Note: You can not build under a subdirectory (namely the submodule). Because there are too many SOFARPC modules, if every submodule needs to be installed and deployed, there will be much useless records in the repository. This issue is considered in the process of designing the SOFARPC project structure.</description>
    </item>
    
    <item>
      <title>Configuration parameters</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration/</guid>
      <description>Provide all the parameters that can be configured. * Service publishing and reference configuration * Warm-up forwarding configuration * Fault tolerance configuration</description>
    </item>
    
    <item>
      <title>Consul</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-consul/</guid>
      <description>To use Consul as service registry center, you need to add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ecwid.consul&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;consul-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  and need to configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500  The value after consul: is the connection address of the consul. If you need to set some other parameters, you can also configure as follows:
com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1&amp;amp;b=2  </description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/contributing/</guid>
      <description>Before you read this document, you are suggested to read the SOFARPC development roadmap to learn about development tasks and future plans.
 Preparations Before you contribute code, you need to learn the basic use of Git tool and GitHub website.
 For how to use the Git tool, see Git official documenation and pay attention to the first few chapters. For Git collaboration process, see Git collaboration process.</description>
    </item>
    
    <item>
      <title>Copyright</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/notice/</guid>
      <description>SOFARPC uses some third-party open-source components which include but not limited to:
 Major dependencies
 Netty under Apache License 2.0 SLF4j under MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0  Extended dependencies
 protobuf under New BSD License Snappy under New BSD License dubbo under Apache License 2.0   </description>
    </item>
    
    <item>
      <title>Custom filter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-filter/</guid>
      <description>SOFARPC provides a good extensibility mechanism, which provide SPI capabilities for each module. SOFARPC uses multiple filters to intercept requests and responses. These filters can be customized and extended by users. The execution order of custom filters is after the built-in filters. The procedure is as follows:
Bolt filter 1 Create a new custom filter.
public class CustomFilter extends Filter { @Override public boolean needToLoad(FilterInvoker invoker) { return true; } @Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { SofaResponse response = invoker.</description>
    </item>
    
    <item>
      <title>Custom router</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-router/</guid>
      <description>The route service address in SOFARPC is abstracted into a processing chain, and is processed by each router. Like filter, SOFARPC provides the same extensibility for router.
@Extension(value = &amp;quot;customerRouter&amp;quot;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override public boolean needToLoad(ConsumerBootstrap consumerBootstrap) { return true; } @Override public List&amp;lt;ProviderInfo&amp;gt; route(SofaRequest request, List&amp;lt;ProviderInfo&amp;gt; providerInfos) { return providerInfos; }  Create a extension file META-INF/services/sofa-rpc/com.</description>
    </item>
    
    <item>
      <title>Custom thread pool</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-thread-pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-thread-pool/</guid>
      <description>SOFARPC supports custom business thread pools. A separate business thread pool can be set up for the specified service, isolated from SOFARPC&amp;rsquo;s global business thread pool. Multiple services can share a single thread pool.
SOFARPC requires that the type of custom thread pool must be com.alipay.sofa.rpc.server.UserThreadPool.
Use XML If you publish the service using XML, you can first set the bean of the thread pool whose class is com.alipay.sofa.rpc.server.UserThreadPool, and then set the bean in the thread-pool-ref attribute of &amp;lt;sofa:global-attrs&amp;gt; tag.</description>
    </item>
    
    <item>
      <title>Direct call</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/peer-to-peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/peer-to-peer/</guid>
      <description>SOFARPC supports scenarios where a specified address is called.
The use of direct call in Java API is as follows, only set the direct connection address:
ConsumerConfig&amp;lt;HelloService&amp;gt; consumer = new ConsumerConfig&amp;lt;HelloService&amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(&amp;quot;bolt://127.0.0.1:12201&amp;quot;);  The use of direct call in XML is as follows:
&amp;lt;sofa:reference interface=&amp;quot;com.alipay.sample.HelloService&amp;quot; id=&amp;quot;helloService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:route target-url=&amp;quot;127.0.0.1:12200&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:reference&amp;gt;  The use of direct call in Annotation is as follows:
@SofaReference(binding = @SofaReferenceBinding(bindingType = &amp;quot;bolt&amp;quot;, directUrl = &amp;quot;127.</description>
    </item>
    
    <item>
      <title>Disaster recovery</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault/</guid>
      <description>Fault Recover Including Fault-Hystrix and Fault-Tolerance features.</description>
    </item>
    
    <item>
      <title>Dubbo</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo/</guid>
      <description>SOFARPC provides support for the Dubbo protocol, making it convenient for you to interface with existing Dubbo service. * Basic usage</description>
    </item>
    
    <item>
      <title>Extension mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/extension-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/extension-loader/</guid>
      <description>ExtensionLoader To ensure that all steps of SOFARPC have sufficient scalability, SOFARPC defines a very flexible extension mechanism in which all extension implementations are equal.
This mechanism is very useful for both SOFARPC developers and users. SOFARPC abstracts itself into multiple modules which have no explicit dependencies on each other and interact via SPI.
This extension mechanism abstracts the interaction method of SPI. If you have read the documents about Filter and Router, you may have such experience.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/faq/</guid>
      <description>Common issues Q: Is SOFARPC the version used inside Ant Financial? Yes, SOFARPC has excellent extension interfaces, and the version for internal use just has some additional extension implementations based on the open source version. For example, the cloud-based commercial version integrates the Ant Financial Technology&amp;rsquo;s shared registry center, Distributed System Tracing (DST) and other products. The version for internal use integrates Ant Financial&amp;rsquo;s internal registry center, LDC router and other individual extensions.</description>
    </item>
    
    <item>
      <title>Fault tolerance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-tolerance/</guid>
      <description>Usually, a service have multiple service providers in a cluster. Some of the service providers may have persistent connections still survived due to network, configuration, long-term fullgc, full thread pool, hardware failure and others, but the program cannot respond properly. The stand-alone fault tolerance function can degrade the exceptional service providers so that the client requests can be pointed to the healthy node. When the exceptional nodes become normal, the standalone fault tolerance function will restore the nodes, so that the client requests can gradually distribute traffic to the nodes.</description>
    </item>
    
    <item>
      <title>Fault tolerance configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-fault-tolerance/</guid>
      <description>Fault tolerance automatically monitors the RPC calls, degrades the weight of the failed node, and recovers the weight when the node restored to normal. The bolt protocol is currently supported.
In SOFABoot, you only need to configure fault tolerance parameters to application.properties. You can select not to configure all parameters but only configure the parameters that you care about. Then, the remaining parameters will take the default values. Note that rpc.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/features/</guid>
      <description> Features  Service publishing and reference Communication Protocol  Bolt protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool  RESTful protocol  Basic usage Custom filter Integrated Swagger  Dubbo  Basic usage  H2C  Basic usage   Registry center Direct call Load balancing Custom filter Custom router addressing Call retry Tracing  SOFATracer Skywalking  Custom thread pool Link data transparent transmission Warm-up weight Fault tolerance Node cross-language call Graceful shutdown  </description>
    </item>
    
    <item>
      <title>Generic call</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/generic-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/generic-invoke/</guid>
      <description>Generic calls provide the ability for clients to initiate calls without having to rely on the server`s interface. Currently, the generic call of SOFARPC only supports using Hessian2 as the serialization protocol under the Bolt communication protocol.
SOFABoot environment Publish Service There is nothing special about publishing a service. Just publish the service normally, for example:
&amp;lt;!-- generic --&amp;gt; &amp;lt;bean id=&amp;quot;sampleGenericServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.generic.SampleGenericServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;sampleGenericServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.generic.SampleGenericService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt/&amp;gt; &amp;lt;/sofa:service&amp;gt;  Reference Service &amp;lt;sofa:reference jvm-first=&amp;quot;false&amp;quot; id=&amp;quot;sampleGenericServiceReference&amp;quot; interface=&amp;quot;com.</description>
    </item>
    
    <item>
      <title>Get started with SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-sofa-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-sofa-boot/</guid>
      <description>This document introduces how to use SOFARPC for service publishing and reference in SOFABoot.
You can get the code sample of this document by clicking here. Note that the code sample requires a local installation of the zookeeper environment. If not, you need to remove the com.alipay.sofa.rpc.registry.address configuration in application.properties to use the local file as a registry center.
Create a project  Prepare environment: SOFABoot requires JDK7 or JDK8 and needs to be compiled with Apache Maven 2.</description>
    </item>
    
    <item>
      <title>Get started with SOFARPC</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-rpc/</guid>
      <description>This document introduces how to apply SOFARPC for service publishing and reference. This example will simulate a server locally to listen to a port and publish a service, and the client will reference the service for direct call.
You can get the code sample of this document by clicking here.
Create a project You need to install JDK 6 or above and Maven 3 or above.
Create a new Maven project and introduce SOFARPC dependency.</description>
    </item>
    
    <item>
      <title>Graceful shutdown</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/graceful-shutdown/</guid>
      <description>Graceful shutdown includes two parts. One is the RPC framework as client, and the other is the RPC framework as server.
As server As the server, the RPC framework should not be violently shutdown.
com.alipay.sofa.rpc.context.RpcRuntimeContext  Added a ShutdownHook to the static initialization snippet:
// Add jvm shutdown event if (RpcConfigs.getOrDefaultValue(RpcOptions.JVM_SHUTDOWN_HOOK, true)) { Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() { @Override public void run() { if (LOGGER.isWarnEnabled()) { LOGGER.warn(&amp;quot;SOFA RPC Framework catch JVM shutdown event, Run shutdown hook now.</description>
    </item>
    
    <item>
      <title>H2C</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c/</guid>
      <description> H2C protocol SOFARPC provides support for the H2C protocol, which can be used to publish and reference services.
 Basic usage  </description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hystrix fault tolerance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-hystrix/</guid>
      <description>SOFARPC is integrated Hystrix provides fuse capability and is currently available in the first preview version. More information about Hystrix can be found in Hystrix Official Documentation, Hystrix integration capabilities are provided primarily by ScienJus, thanks for contribution.
Next, let&amp;rsquo;s talk about how to experience the fuse capability of Hystrix. The following example uses the SOFARPC 5.5.0 version. More Hystrix configuration and SOFABoot integration usage will be provided in subsequent releases, so stay tuned.</description>
    </item>
    
    <item>
      <title>Integrate with Swagger</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-swagger/</guid>
      <description>Since rpc-sofa-boot-starter version 6.0.1, SOFARPC provide the ability to integrate RESTful service with Swagger easily.
If you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment and you want to enable Swagger support, first, you need add Swagger dependencies in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.swagger.core.v3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;swagger-jaxrs2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;20.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Then you need add a configuration com.alipay.sofa.rpc.restSwagger=true in application.properties.
Finally, visit http://localhost:8341/swagger/openapi and you can get all the Swagger OpenAPI information about SOFARPC&amp;rsquo;s RESTful services.</description>
    </item>
    
    <item>
      <title>Link data transparent transmission</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-chain-pass-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-chain-pass-data/</guid>
      <description>The link data transparent transmission function allows the applications to store data in the calling context, and then any applications in the entire link can operate the data. This feature is used as follows. Data can be put into the request and response of the link for transparent transmission, and then the applications can get the corresponding data from the link.
RpcInvokeContext.getContext().putRequestBaggage(&amp;quot;key_request&amp;quot;,&amp;quot;value_request&amp;quot;); RpcInvokeContext.getContext().putResponseBaggage(&amp;quot;key_response&amp;quot;,&amp;quot;value_response&amp;quot;); String requestValue=RpcInvokeContext.getContext().getRequestBaggage(&amp;quot;key_request&amp;quot;); String responseValue=RpcInvokeContext.getContext().getResponseBaggage(&amp;quot;key_response&amp;quot;);  Example For example, in the scenario of A -&amp;gt; B -&amp;gt; C, the request arguments set by A are transmitted to B and C.</description>
    </item>
    
    <item>
      <title>Load balance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/load-balance/</guid>
      <description>SOFARPC provides a variety of load balancing algorithms and currently supports the following five types:
   Type Name Description     random Random algorithm The default load balancing algorithm.   localPref Local preference algorithm Firstly detect whether the service is published locally, if not, random algorithm is used.   roundRobin Round Robin algorithm Method-level polling, the polling is carried out separately to each method, without affecting each other.</description>
    </item>
    
    <item>
      <title>Local</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-local/</guid>
      <description>To use local file as service registry center, you can configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg  The /home/admin/registry/localRegistry.reg is the directory of the local files to be used.
On windows OS, the above path indicates the following directory:
com.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg  </description>
    </item>
    
    <item>
      <title>Nacos</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-nacos/</guid>
      <description>SOFARPC already supports using Nacos as a service registry. Suppose you have deployed Nacos Server locally according to Nacos&amp;rsquo;s Quick Start, and the service discovery port is set to 8848 by default.
To use Nacos as a service registry in SOFARPC, you only need to add the following configuration to application.properties:
com.alipay.sofa.rpc.registry.address=nacos://127.0.0.1:8848  If you use SOFARPC directly, not SOFABoot, you need to add dependency of nacos, notice that version is what you want to use in your project.</description>
    </item>
    
    <item>
      <title>NodeJS support</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/node-and-java-communicate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/node-and-java-communicate/</guid>
      <description>If you need to call SOFARPC through NodeJs, you can start by following this document.
Install First install the SOFARPC Node.
https://github.com/sofastack/sofa-rpc-node
Use the following command:
$ npm install sofa-rpc-node --save  Code sample Expose an RPC service and publish it to registry center &#39;use strict&#39;; const { RpcServer } = require(&#39;sofa-rpc-node&#39;).server; const { ZookeeperRegistry } = require(&#39;sofa-rpc-node&#39;).registry; const logger = console; // 1. Create a Zookeeper registry client const registry = new ZookeeperRegistry({ logger, Address: &#39;127.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/overview/</guid>
      <description>SOFARPC is a Java-based RPC service framework open sourced by Ant Financial, which provides remote service call between applications, high scalability and fault tolerance features. Currently, all RPC calls of Ant Financial businesses use SOFARPC. SOFARPC provides users with functions such as load balancing, traffic forwarding, link tracing, link data transparent transmission, and fault removal.
In addition, SOFARPC supports different protocols, currently including bolt, RESTful, dubbo, and H2C. Bolt is a network communication framework based on Netty developed by Ant Financial Services Group.</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programming/</guid>
      <description>Describe several methods to use SOFARPC in different environments. * Use API in non-Spring environment * Use XML in SOFABoot environment * Use Annotation in SOFABoot environment * Use dynamic API in SOFABoot environment</description>
    </item>
    
    <item>
      <title>REST Cors</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-cors/</guid>
      <description> For REST，we provide a Filter to support cors now.
SOFARPC API Usage For users who use SOFARPC API directly，they can add parameters in ServerConfig.
Map&amp;lt;String,String&amp;gt; parameters=new HashMap&amp;lt;String, String&amp;gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,&amp;quot;abc.com,cdf.com&amp;quot;); serverConfig.setParameters(parameters);  XML Usage You can add this configuration to application.properties
com.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com  </description>
    </item>
    
    <item>
      <title>REST filter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-filter/</guid>
      <description>For REST, we designed a JAXRSProviderManager manager class. It takes effect on the server when the service starts.
com.alipay.sofa.rpc.server.rest.RestServer#registerProvider  For the user-defined Filter class, you can call it after the initialization is complete.
com.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance  To register filter, since the custom Filter follows REST specification, you need to implement the following interface:
javax.ws.rs.container.ContainerResponseFilter or javax.ws.rs.container.ContainerRequestFilter  After the REST server is started, if using bare SOFARPC, you need to register filter first before starting the service.</description>
    </item>
    
    <item>
      <title>RESTful</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful/</guid>
      <description>SOFARPC supports RESTful protocol, making it convenient for users to publish an interface in the manner of RESTful. * Basic usage * Custom Filter * Integrate Swagger</description>
    </item>
    
    <item>
      <title>RPC application parameter configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/application-rpc-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/application-rpc-config/</guid>
      <description>In SOFABoot, the RPC framework provides some configuration parameters at the application level, and supports application-level parameter configuration, such as port and thread pool, which are bound by Spring Boot&amp;rsquo;s @ConfigurationProperties. The binding attribute class is com.alipay.sofa.rpc.boot.config.SofaBootRpcProperties, and the configuration prefix is as follows:
static final String PREFIX = &amp;quot;com.alipay.sofa.rpc&amp;quot;;  Then in the application.properties file, you can currently configure the following options. Also, you can write the codes based on your own coding habits as well as according to the Spring Boot specification, camel, underline and so on.</description>
    </item>
    
    <item>
      <title>RPC publishing and reference configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-common/</guid>
      <description>ProviderConfig    Attribute Name Default value Comment     id ID Generated automatically    application Application object Empty ApplicationConfig    interfaceId Service interface (unique identifier)  Use the actual interface class for both normal calls and return calls.   uniqueId Service tag (unique identifier)     filterRef Filter configuration example  List   filter Filter configuration alias  separated by commas   registry Registry center on the server  List   methods Method-level configuration  Map&amp;lt;String, MethodConfig&amp;gt;   serialization Serialization protocol hessian2    register Whether to register true It depends on the implementation and may not take effect.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/release-notes/</guid>
      <description>To learn more, see https://github.com/sofastack/sofa-rpc/releases.</description>
    </item>
    
    <item>
      <title>Retry strategy</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/retry-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/retry-invoke/</guid>
      <description>SOFARPC supports a framework-level retry strategy when the cluster mode is FailOver (SOFARPC uses FailOver mode by default). Retry is only initiated if there is a framework-level exception or a timeout exception on the server. If the business itself throws an exception, the service will not be called again. SOFARPC does not perform any retry by default.
 Note: Although the system will retry calling in case of timeout exception, the server still needs to guarantee the idempotency of the service.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/roadmap/</guid>
      <description>Task list Some of the existing internal features will be available in subsequent iterations.
The features that have been implemented are listed in the following table. You are welcome to claim the tasks and make contributions.
   Task type Task Degree of difficulty Claimant and time Planned completion time Progress Related issues     Documentation Document translation Low       Code Flexible persistent connection management Low    #56   Code etcd registry center implementation Medium @wynn5a</description>
    </item>
    
    <item>
      <title>SOFARPC architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/structure-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/structure-intro/</guid>
      <description>SOFARPC is divided into two layers from bottom to top:
 Core layer: It contains the core components of RPC (such as various interfaces, APIs and common packages) and some common implementations (such as random load balancing algorithms). Function implementation layer: All users of the function implementation layer are equal, and all functions are implemented based on the extension mechanism.  The internal version specific for Ant Financial just has some internal extension based on the open source version.</description>
    </item>
    
    <item>
      <title>SOFARegistry</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-sofa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-sofa/</guid>
      <description>SOFARPC already supports using SOFARegistry as a service registry. Suppose you have deployed SOFARegistry Server locally according to SOFARegistry&amp;rsquo;s Quick Start, and the service discovery port is set to 9603 by default.
To use SOFARegistry as a service registry in SOFARPC, you only need to add the following configuration to application.properties:
com.alipay.sofa.rpc.registry.address=sofa://127.0.0.1:9603  The current version of SOFARegistry is supported:
SOFARPC: 5.5.2, SOFABoot: 2.6.3。
Because of the time of SOFABoot, users need to specify the version of rpc starter.</description>
    </item>
    
    <item>
      <title>SOFATracer</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/sofatracer-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/sofatracer-usage/</guid>
      <description>Since SOFARPC 5.4.0, the SOFATracer function is integrated, which is enabled by default. It can output the data information in the link.
By default, the output data is in JSON format. The involved fields are as follows:
RPC client digest Log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type Service interface information Method name Current thread name Calling type Routing record Target IP Local machine IP Return code Request serialization duration Response deserialization duration Response size (in Byte) Request size (in Byte) Client connection duration Total duration for call Local client port Transparently transmitted baggage data (kv format)  Example:</description>
    </item>
    
    <item>
      <title>Select Service Registry</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-usage/</guid>
      <description>SOFABoot RPC Starter provides a variety of registry center options as well as convenient configurations.
Currently, bolt, rest, and dubbo all support Zookeeper as registry center. In addition, bolt and rest support the local file system as registry center, which is generally used for testing.</description>
    </item>
    
    <item>
      <title>Serialization protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/serialization/</guid>
      <description>When using the Bolt communication protocol, SOFARPC can choose different serialization protocols, which can be hessian2 or protobuf currently.
By default, SOFARPC uses hessian2 as the serialization protocol. If you need to set the serialization protocol to protobuf, you need to configure the following settings when publishing the service:
&amp;lt;sofa:service ref=&amp;quot;sampleService&amp;quot; interface=&amp;quot;com.alipay.sofarpc.demo.SampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs serialize-type=&amp;quot;protobuf&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:service&amp;gt;  That is to add the &amp;lt;sofa:global-attrs&amp;gt; tag to the &amp;lt;sofa:binding.bolt&amp;gt; tag and set the serialize-type attribute to protobuf.</description>
    </item>
    
    <item>
      <title>Service Registry extension guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-extension-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-extension-guide/</guid>
      <description>If you want to extend a registry center, you should take a look at the abstract classes of the registry center.
package com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List&amp;lt;ProviderConfig&amp;gt; configs); public abstract List&amp;lt;ProviderGroup&amp;gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public abstract void batchUnSubscribe(List&amp;lt;ConsumerConfig&amp;gt; configs); }  You can see the main necessary interfaces.</description>
    </item>
    
    <item>
      <title>Service publishing and reference</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/publish-and-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/publish-and-reference/</guid>
      <description>The basic configuration for SOFARPC service publishing and reference is described in the &amp;ldquo;Programming Interface&amp;rdquo; chapter. Here are some of the features of service publishing and referencing.
One service publishes multiple protocols In SOFARPC, a service can be published as multiple protocols, which allows the callers to call the service provider using different protocols.
If you use the Java API, you can build multiple ServerConfigs as follows to set different protocols for different ServerConfigs and then assign these ServerConfigs to ProviderConfig:</description>
    </item>
    
    <item>
      <title>Service publishing and reference in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/rpc-config-xml-explain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/rpc-config-xml-explain/</guid>
      <description>This document describes the complete SOFARPC service publishing and reference in the SOFABoot environment. Publish service &amp;lt;bean id=&amp;quot;helloSyncServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;helloSyncServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncService&amp;quot; unique-id=&amp;quot;&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs registry=&amp;quot;&amp;quot; serialize-type=&amp;quot;&amp;quot; filter=&amp;quot;&amp;quot; timeout=&amp;quot;3000&amp;quot; thread-pool-ref=&amp;quot;&amp;quot; warm-up-time=&amp;quot;60000&amp;quot; warm-up-weight=&amp;quot;10&amp;quot; weight=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;sofa:binding.rest&amp;gt; &amp;lt;/sofa:binding.rest&amp;gt; &amp;lt;/sofa:service&amp;gt; Attribute Name Default value Comment id ID bean名 class Class None ref Service interface implementation class interface Service interface (unique identifier) Use actual interface class for both normal calls</description>
    </item>
    
    <item>
      <title>Skywalking</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/skywalking-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/skywalking-usage/</guid>
      <description>Since SOFARPC 5.4.0, the link analysis feature of Skywalking is supported. You can use it as needed. The Skywalking must be 6.0.0-alpha and above.
This document does not cover the backend deployment. If you need it, please refer to the official Skywalking documentation.
Install Java agent  Locate the agent directory in the downloaded Skywalking release package.
 Set agent.service_name in config/agent.config, which can be any English character. Generally, it can be your own system name.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/test/</guid>
      <description>Unit test Place the unit test cases in the modules developed by yourself.
If the cases rely on a third-party server (such as ZooKeeper), you must manually add the profile. See the registry-zookeeper module code.
If the cases rely on other modules and integration test is required, place them in the test/test-intergrated module.
If the cases also rely on a third-party server (such as ZooKeeper), place them in the test-intergrated-3rd module.</description>
    </item>
    
    <item>
      <title>Timeout control</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-timeout/</guid>
      <description>When using the Bolt protocol for communication, invoke timeout defaults is 3 seconds. You can configure the timeout when referencing the service, and can also configure the timeout period from the dimension of service or method respectively. SOFARPC timeout can be set in milliseconds.
Service If you need to set the timeout from the dimension of service when publishing a service, just configure the timeout parameter to the corresponding value.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/tracing-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/tracing-usage/</guid>
      <description>By default, SOFARPC has integrated SOFATracer. Also, you can use other APM products, such as Skywalking, to achieve the corresponding functions. For details, see the relevant documents:
 SOFATracer Skywalking  If you want to disable the tracing ability of SOFARPC, you can do it in two ways.
If you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment, you can add a configuration com.alipay.sofa.rpc.defaultTracer= in application.properties.
If you are using sofa-rpc-all directly, you can add the following code in the main method of your application before publish any SOFARPC service or create any SOFARPC reference.</description>
    </item>
    
    <item>
      <title>Use API in non-Spring environment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-rpc/</guid>
      <description>SOFARPC Service publishing The process of service publishing involves three classes RegistryConfig, ServerConfig, ProviderConfig.
 RegistryConfig
RegistryConfig registryConfig = new RegistryConfig() .setProtocol(&amp;quot;zookeeper&amp;quot;) .setAddress(&amp;quot;127.0.0.1:2181&amp;quot;)  RegistryConfig represents the registry center. As above, the address and port of the service registry center is 127.0.0.1:2181, and the protocol is Zookeeper.
 ServerConfig java ServerConfig serverConfig = new ServerConfig() .setPort(8803) .setProtocol(&amp;quot;bolt&amp;quot;);    ServerConfig represents the container where service runs. The above declares a server using the 8803 port and the bolt protocol.</description>
    </item>
    
    <item>
      <title>Use XML in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-xml/</guid>
      <description>XML mode Declare the xsd file of SOFABoot: In the XML configuration file to be used, configure the declaration of the header xsd file to the followings. This enables development using the XML elements defined by SOFABoot.
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www .w3.org/2001/XMLSchema-instance&amp;quot; xmlns:sofa=&amp;quot;http://sofastack.io/schema/sofaboot&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation =&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://sofastack.io/schema/sofaboot http://sofastack .io/schema/sofaboot.xsd&amp;quot;  The way to publish and reference services in xml mode is as follows. sofa:service represents publishing service, and sofa:reference represents referencing service.</description>
    </item>
    
    <item>
      <title>Use annotation in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-annotation/</guid>
      <description>Use annotation for service publishing/reference In addition to the regular xml mode, it is also supported to publish and reference services with annotation in the SOFABoot environment. Similar to xml, we provide @SofaService and @SofaReference as well as @SofaServiceBinding and @SofaReferenceBinding annotation for multi-protocol.
Service publishing To publish an RPC service, you only need to add a @SofaService annotation on the bean to specify the interface and protocol type.</description>
    </item>
    
    <item>
      <title>Use dynamic API in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-api/</guid>
      <description>Use API SOFABoot provides a set of programming APIs for RPC service publishing and reference. It is convenient to publish and reference RPC services directly in the code. Similar to Spring&amp;rsquo;s ApplicationContextAware, in order to use the programming API, you first need to implement the ClientFactoryAware interface to get the programming component API:
public class ClientFactoryBean implements ClientFactoryAware { private ClientFactory clientFactory; @Override public void setClientFactory(ClientFactory clientFactory) { this.clientFactory = clientFactory; } }  With DirectService as an example, see how to use the clientFactory to publish an RPC service through the programming API:</description>
    </item>
    
    <item>
      <title>Version release</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/version-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/version-release/</guid>
      <description>Version number The system adopts a three-digit versioning scheme. The three digits respectively are major version number, minor version number, and revision number, for example: 5.1.2.
For more information, see the http://semver.org/lang/zh-CN/.
 Major version number: All versions in the major version number must be compatible with each other. It is not necessary to be fully compatible with other major version numbers, but it is best to have backward compatibility.</description>
    </item>
    
    <item>
      <title>Warm-up weight</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/provider-warmup-weight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/provider-warmup-weight/</guid>
      <description>The warm-up weight feature allows the client machine to distribute traffic based on the corresponding weight of the server. This feature is also often used in the scenario where a few machines within a cluster are being started. The server machines can be warmed up in a short time with the traffic weight function, and then continue to receive the normal traffic.
The operating mechanism is as follows:  When the server service starts, it pushes its own warm-up duration, weight during warm-up, and normal weight after warm-up to the Service Registry.</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-zookeeper/</guid>
      <description>To use Zookeeper as service registry center, you only need to configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181  Note: Considering the real-time nature of the service, the following features are not supported currently.
SOFABoot RPC also provides a cache file (not supported currently), which is used for service discovery when ZooKeeper is not available. The way to configure this cache file is as follows:
com.alipay.sofa.rpc.registry.address=zookeeper://xxx:2181?file=/home/admin/registry  Zookeeper Auth When users need to auth the providers and consumers, they can use a auth key to write or read the dictionary normally, only when they use the same key, zookeeper server will process these requests.</description>
    </item>
    
  </channel>
</rss>