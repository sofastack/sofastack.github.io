<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFATracer on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/</link>
    <description>Recent content in SOFATracer on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Asynchronous thread processing</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/async/</guid>
      <description>Use java.lang.Runnable in thread If you start a thread via java.lang.Runnable in the code or use a thread pool to process some businesses asynchronously, SOFATracer log context needs to be passed from the parent thread to the child thread. com.alipay.common.tracer.core.async.SofaTracerRunnable provided by SOFATracer is reponsible for completing this operation by default. You can use it as follows:
Thread thread = new Thread(new SofaTracerRunnable(new Runnable() { @Override public void run() { //do something your business code } })); thread.</description>
    </item>
    
    <item>
      <title>DataSource Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-datasource/</guid>
      <description>In this document will demonstrate how to use SOFATracer to track of Datasource.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce SOFATracer Introduce SOFATracer dependency in the new Spring Boot project:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Introduce h2database dependencies For convenience, we use the h2database memory database for test. So, we need to introduce the following dependencies:</description>
    </item>
    
    <item>
      <title>DataSource log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-datasource/</guid>
      <description>Datasource Log Format SOFATracer tracks the standard JDBC data source and outputs the chain data of SQL statement execution, in the default JSON format.
DataSource digest log (datasource-client-digest.log) The data is output in JSON format. Each key meaning is as follows:
   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Database.</description>
    </item>
    
    <item>
      <title>Dubbo Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-dubbo/</guid>
      <description>Dubbo Integration In this document will demonstrate how to use SOFATracer to track of Dubbo, this example address.
Prepare Environment The versions of the framework components used in this case are as follows:
 SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8  This case includes three submodules:
 tracer-sample-with-dubbo-consumer service provider tracer-sample-with-dubbo-provider service consumer tracer-sample-with-dubbo-facade service interface define  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot&amp;rsquo;s dependency.</description>
    </item>
    
    <item>
      <title>Dubbo log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-dubbo/</guid>
      <description>Dubbo Log Format SOFATracer integrates Dubbo and outputs the requested link log data format. The default is JSON data format.
Dubbo service consumer digest log（dubbo-client-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   traceId TraceId   spanId SpanId   span.kind span Type   local.app Current application name   protocol protocol   service service interface   method service method   invoke.</description>
    </item>
    
    <item>
      <title>Functional interface support</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/functional-interface-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/functional-interface-support/</guid>
      <description>Since Java 8, Java has introduced various @FunctionalInterface interfaces to support functional programming. Generally, Java functions will be executed in a ForkJoinPool. If some thread variables of Tracer are not passed in, it will cause the loss of Trace information.
Therefore, in SOFATracer XXX version, a series of wrapper classes for these @FunctionalInterface interfaces has been added to ensure that trace-related information can be transferred correctly and transparently. The following is an example of the Consumer interface, just need to change the construction of Consumer to SofaTracerConsumer, and pass the original Consumer as the parameter of the constructor of SofaTracerConsumer:</description>
    </item>
    
    <item>
      <title>HttpClient Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-httpclient/</guid>
      <description>HttpClient Integration In this document will demonstrate how to use SOFATracer to track of HttpClient, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;!-- SOFATracer dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- HttpClient dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;!-- 4.5.X --&amp;gt; &amp;lt;version&amp;gt;4.5.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;httpasyncclient&amp;lt;/artifactId&amp;gt; &amp;lt;!-- 4.X --&amp;gt; &amp;lt;version&amp;gt;4.1.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer under the project&amp;rsquo;s application.</description>
    </item>
    
    <item>
      <title>HttpClient log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-httpclient/</guid>
      <description>HttpClient Log Format After integrating tracer-httpclient-plugin, SOFATracer outputs the link data requested by HttpClient in JSON data by default.
HttpClient digest log (httpclient-digest.log) The data is output in JSON format. Each key meaning is as follows:
   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.url Request URL   Method Request HTTP method   Result.</description>
    </item>
    
    <item>
      <title>OkHttp Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-okhttp/</guid>
      <description>OkHttp Integration In this document will demonstrate how to use SOFATracer to track of OkHttp, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Dependency introduction &amp;lt;!-- SOFATracer dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- okhttp dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.squareup.okhttp3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;okhttp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.</description>
    </item>
    
    <item>
      <title>OkHttp log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-okhttp/</guid>
      <description>OkHttp Log Format SOFATracer integrates OkHttp and outputs the requested link log data format. The default is JSON data format.
OkHttp digest log（okhttp-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.</description>
    </item>
    
    <item>
      <title>OpenFeign Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-openfeign/</guid>
      <description>OpenFeign Integration In this document will demonstrate how to use SOFATracer to track of OpenFeign.
Prepare Environment The versions of the framework components used in this case are as follows:
 Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8  This case includes two submodules:
 tracer-sample-with-openfeign-provider service provider tracer-sample-with-openfeign-consumer service consumer  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot&amp;rsquo;s dependency.</description>
    </item>
    
    <item>
      <title>OpenFeign log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-openfeign/</guid>
      <description>OpenFeign Log Format SOFATracer integrates Spring Cloud OpenFeign and outputs the requested link log data format. The default is JSON data format.
Spring Cloud OpenFeign digest log（feign-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.</description>
    </item>
    
    <item>
      <title>Print traceId and spanId in application log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/print-traceid-spanid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/print-traceid-spanid/</guid>
      <description>Print traceId And spanId To Application Log SLF4J provides MDC (Mapped Diagnostic Contexts), which supports you to define and modify log output formats and content. This document introduces the SLF4J MDC feature integrated in SOFATracer, which allows you to output the current SOFATracer context TraceId and SpanId with simply modifying the log configuration file.
Prerequisites In order to properly print the TraceId and SpanId parameters in the logs of the application, the log programming interface needs to be programmed for SLF4J.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/componentaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/componentaccess/</guid>
      <description>SOFATracer integration component list reference:Introduction To SOFATracer, Please pay attention to the SOFATracer version and JDK version of different components when using.
Prepare Environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments: - JDK7 or JDK8 - Apache Maven 3.2.5+ required for compilation
Samples List The following Samples projects are all SOFABoot projects (also supported in the SpringBoot project). For information on how to create SOFABoot projects, please refer to SOFABoot quick start.</description>
    </item>
    
    <item>
      <title>Report data to Zipkin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/report-to-zipkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/report-to-zipkin/</guid>
      <description>This example demonstrates how to remotely report link data to Zipkin by configuring SOFATracer in an application that integrates SOFATracer.
The following examples demonstrate how to use them in SOFABoot/SpringBoot projects and non-SOFABoot/SpringBoot projects, respectively.
Prepare environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments: + JDK7 or JDK8 + Apache Maven 3.2.5+ required for compilation
Introduce SOFABoot After creating a Spring Boot project, you need to introduce the SOFABoot dependency.</description>
    </item>
    
    <item>
      <title>RestTemplate Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-resttemplate/</guid>
      <description>RestTemplate Integration In this document will demonstrate how to use SOFATracer to track of RestTemplate, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;!-- SOFABoot version unified management --&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.properties file, including spring.</description>
    </item>
    
    <item>
      <title>RestTemplate log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-resttemplate/</guid>
      <description>RestTemplate Log Format SOFATracer integrates RestTemplate and outputs the requested link log data format. The default is JSON data format.
RestTemplate digest log（resttemplate-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.</description>
    </item>
    
    <item>
      <title>SOFARPC log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-sofarpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-sofarpc/</guid>
      <description>SOFARPC Log Format After SOFARPC (v5.4.0 and above) is integrated in SOFATracer, the link data is output in JSON format by default. Each field meaning is as follows:
RPC client digest log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type (bolt, rest) Service interface information Method name Current thread name Calling type (sync, callback, oneway, future) Routing record (DIRECT, REGISTRY) Target IP Target appName Local machine IP Return code (00=success; 01=business exception; 02=RPC logic error; 03=timeout failure;04=routing failure) Request serialization time (in ms) Response deserialization time (in ms) Response size (in Byte) Request size (in Byte) Client connection duration (in ms) Total call duration (in ms) Local client port Transparently transmitted baggage data (kv format)  Example:</description>
    </item>
    
    <item>
      <title>SOFATracer Tools</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/utils/</guid>
      <description>SOFATracer Tools Get Span through SOFATracer context In the process of a distributed link call, the component that integrates SOFATracer generates a Span and caches it in the SOFATracer context. And the context is cached in ThreadLocal. You can get the current SOFATracer context in the following way:
SofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext();  Through the SOFATracer context SofaTraceContext, you can add, delete, modify, check, and empty the cached Spans. As the developers responsible for integrating components, we will add, delete, modify and check the SOFATracer context to integrate distributed link tracking.</description>
    </item>
    
    <item>
      <title>SOFATracer configuration items</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/configuration/</guid>
      <description>SOFATracer configuration item After introducing SOFATracer, you can add related configuration items in Spring Boot configuration file application.properties to customize the behaviors of SOFATracer.
For SOFATracer log output directory, you can configure logging.path in application.properties, then the log output path is ${logging.path}/tracelog; if logging.path is not configured, the default output path is ${user.home}/logs/tracelog.
   Configuration item Description Default value     logging.path log output directory SOFATracer output logs to logging.</description>
    </item>
    
    <item>
      <title>SOFATracer overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/overview/</guid>
      <description>SOFATracer is a distributed link tracing system based on OpenTracing specification developed by Ant Financial. Its core concept is to concatenate the same request distributed on each service node with a global TraceId. By the unified TraceId, it can record the various network call information in the call link in logs, and can remotely report the call records to Zipkin for presentation, thus implementing perspective network call.
Features Distributed link tracing solution based on OpenTracing specification SOFATracer is a solution that provides link tracing based on and improved from the OpenTracing specification.</description>
    </item>
    
    <item>
      <title>Sampling modes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/sampler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/sampler/</guid>
      <description>Sampling Currently,SOFATracer provides two sampling modes. One is the fixed sampling rate based on BitSet. The other is the sampling provided to the user to customize the implementation sampling.The following example shows how to use it.
This example is based on the tracer-sampled-with-springmvc project,Except for application.properties, everything else is the same.
Sampling mode based on fixed sampling rate Add sampling related configuration items in application.properties #Sampling rate 0~100 com.alipay.sofa.tracer.samplerPercentage=100 #Sampling type name com.</description>
    </item>
    
    <item>
      <title>Spring MVC Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-mvc/</guid>
      <description>In this document will demonstrate how to use SOFATracer to track of SpringMVC, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.</description>
    </item>
    
    <item>
      <title>Spring MVC log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-springmvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-springmvc/</guid>
      <description>SpringMVC Log Format After integrating SpringMVC, SOFATracer will output the link data format of the MVC requests, which is JSON by default.
Spring MVC digest log (spring-mvc-digest.log) Data is ouput in JSON format. The meaning of each key is as follows:
   Key Meaning     Time Log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.</description>
    </item>
    
    <item>
      <title>Terminologies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/explanation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/explanation/</guid>
      <description>Explanation of Terms    Terminology Description     TraceId TraceId refers to the ID that represents the unique request in SOFATracer. This ID is generally generated by the first system in the cluster that processes the request and is passed over the network to the next requested system in distributed calls.   SpanId SpanId represents the location or level of the request in the entire call link.</description>
    </item>
    
    <item>
      <title>TraceId and spanId generation rule</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/traceid-generated-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/traceid-generated-rule/</guid>
      <description>TraceId generation rule SOFATracer uses TraceId to concatenate the call logs of a request on each server. The TraceId is typically generated by the first server that receives the request. The generation rule is: server IP + generated time + incremental sequence + current process ID, such as:
0ad1348f1403169275002100356696   The first 8 digits 0ad1348f is the IP of the machine that generates TraceId. This is a hexadecimal number, in which every two digits represents a part of IP.</description>
    </item>
    
  </channel>
</rss>