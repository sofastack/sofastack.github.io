<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFAActs on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/</link>
    <description>Recent content in SOFAActs on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>All-in-one editor</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ide/</guid>
      <description>Open ACTS IDE In the Packages view, right click the function name annotated by @Test, and choose ACTS Function &amp;gt; Edit Test Case as shown in the following figure.
Write test data Prepare request parameters Prepare correct request parameter data for the request parameters (type, order, and quantity) of the tested method. The parameters are divided into simple and complex types. Simple parameters include parameter types String, Date, Integer, Float, Double, Long, Short, and Byte (including their corresponding basic types, such as int and float).</description>
    </item>
    
    <item>
      <title>Developer guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/developer-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/developer-guide/</guid>
      <description>1. How to compile  Install JDK7 or later versions, and Maven 3.2.5 or later versions. Directly download the code, and execute the following command in the code directory:
 mvn clean install  2. Version release Version number ACTS uses a three-digit version number in the form of major, minor, and patch, for example, 1.0.1.
For more information, see https://semver.org/.
 Major version number: All versions within a major version number must be compatible with each other.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-api/</guid>
      <description>Customize different engine stages You can rewrite APIs provided by ActsTestBase in the test script or in the base class.
 Rewrite the prepare, execute, check, and clear actions. For example, you can add some actions before or after super.prepare(). Rewrite the process method. You can add some actions before or after super.process() to reorchestrate the entire script. For example, you can add some personalized steps in the existing clear &amp;gt; prepare &amp;gt; execute &amp;gt; check process.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/faq/</guid>
      <description>Q: What should I do if NoSuchMethodError is returned? Generally, this error is returned in the case of dependency conflicts. Commonly known dependency conflicts are listed as follows. Exclude the corresponding dependencies when you encounter relevant conflicts.
Log conflict commons-logging conflict &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt;  logback-classic conflict Rule out logback-classic by the location of the conflict. For example, application dependencies spring-boot-starter-logging and spring-test conflict with each other.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Framework preparation</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ready/</guid>
      <description>Framework preparation Before reading, you can download and install ACTS IDE and import the ACTS framework by refering to Quick start.
This topic mainly describes the encoding, datasource configuration, and quick configuration to help you use the ACTS framework.
Encoding Ensure that the encoding of ACTS and that of the system code are consistent, specifically, ensure that the encoding for script generation and the encoding of the IDEA workspace are consistent with the encoding of your application code.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/contributing/</guid>
      <description>Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to the article Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing an ACTS bug or adding an ACTS feature, submit an issue on ACTS GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>Models</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-model/</guid>
      <description>Quickly understand of ACTS models When you write a test case, you need to prepare some database tables, request parameter data of methods, or data for validating database tables and responses. You can save such data in models, and import it to preparation data or validation data when you edit the test case. This allows you to conveniently reuse data. Currently, ACTS models can be divided into database models and class models.</description>
    </item>
    
    <item>
      <title>Quick start</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/getting-started/</guid>
      <description>This topic comprises four parts:
 Part 1: Install the ACTS IDE visual editor on Intellij IDEA. Part 2: Import the ACTS dependency to a multi-module project. Part 3: Establish the ACTS framework in the test module to manage ACTS test cases. Part 4: Generate the ACTS test script.  1. Install ACTS IDE We recommend that you use Intellij IDEA 2017. For the sake of your data security, please download the ACTS IDE installation package from the following source only: Click to download ACTS IDE.</description>
    </item>
    
    <item>
      <title>SOFAActs overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/overview/</guid>
      <description>AntCoreTest (ACTS) is a white-box test framework developed by Ant Financial based on years&amp;rsquo; testing knowledge and experience with the financial-level distributed architecture for the purpose of providing enterprises with a highly efficient, precise, and automated interface testing services. In addition to general testing capabilities such as data-driven testing provided by conventional open source frameworks like TestNG, ACTS offers new features such as model-driven testing, visualized editing, and a standard process engine to assist engineers with efficient and high quality test case compilation as well as standard and precise test validation for interface testing.</description>
    </item>
    
    <item>
      <title>Scripts</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-script/</guid>
      <description>Quickly understand ACTS scripts Do you have to frequently compile test cases? Are you frustrated by the following problems?
 You have to repeat assertEquals, which is definitely not creative. Missing an assert may lead to false success, while mistaking one may ruin your mood. If the scenario is complex, the test code may be longer than the service code, which is painful. You have to migrate utility classes every time you start writing test cases for a new application.</description>
    </item>
    
  </channel>
</rss>