<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MOSN on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/</link>
    <description>Recent content in MOSN on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/mosn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MOSN 0.1.0 performance report</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/reference-performance-report010/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/reference-performance-report010/</guid>
      <description>Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.
It is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.
 For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/overview/</guid>
      <description>MOSN&amp;rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.
MOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.</description>
    </item>
    
    <item>
      <title>Project sample</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-samples/</guid>
      <description> Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.   Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  </description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-setup/</guid>
      <description>This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.
Note: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.
Prepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/release-notes/</guid>
      <description>To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.</description>
    </item>
    
    <item>
      <title>Use MOSN to build Service Mesh platform</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-with-sofamesh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-with-sofamesh/</guid>
      <description>This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:
 Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio.</description>
    </item>
    
  </channel>
</rss>