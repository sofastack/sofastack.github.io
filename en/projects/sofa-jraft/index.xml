<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFAJRaft on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/</link>
    <description>Recent content in SOFAJRaft on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&#39;Introduction to the Raft algorithm&#39;</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/raft-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/raft-introduction/</guid>
      <description>Novel features:      Strong leader  Raft uses a stronger form of leadership than other consensus algorithms. For example, log entries only flow from the leader to other servers. This simplifies the management of replicated logs and makes Raft easier to understand.    Leader election  Raft uses randomized timers to elect leaders. This reduces election conflicts simply and rapidly.    Membership change  Raft uses a new joint consensus approach.</description>
    </item>
    
    <item>
      <title>Application scenarios</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/user-stories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/user-stories/</guid>
      <description>RheaKV: an embedded, distributed, highly available, and strongly consistent KV storage class library that is implemented based on JRaft and RocksDB. AntQ Streams QCoordinator: uses JRaft to implement elections and meta information storage in the Coordinator cluster. Metadata management module of SOFARegistry: an IP address registration. The data held by all nodes must be consistent, and the normal data storage must not be affected when a minority of nodes fail.</description>
    </item>
    
    <item>
      <title>Benchmark data</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/benchmark-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/benchmark-performance/</guid>
      <description>Test code
Test environment and conditions  Three 16-core 20 GB memory Docker containers as the server nodes (3 replicas) Two to eight 8-core Docker containers as clients 24 Raft groups. Each server node has eight leaders responsible for processing read/right requests. Followers do not have the permission to read. The target of stress testing is the RheaKV module of JRaft. Only the put and get APIs are subject to stress testing.</description>
    </item>
    
    <item>
      <title>Distributed consensus - Raft and JRaft</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/consistency-raft-jraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/consistency-raft-jraft/</guid>
      <description>Distributed consensus algorithm Understand distributed consensus  Multiple participants reach a complete consensus on one thing: one conclusion for one thing. The conclusion cannot be overthrown.  Typical distributed consensus algorithms  Paxos: It is considered as the foundation of distributed consensus algorithms. Other algorithms are its variants. However, the Paxos paper only provides the process of a single proposal, without describing the details of multi-paxos that is required for state machine replication.</description>
    </item>
    
    <item>
      <title>Engine architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/engine-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/engine-architecture/</guid>
      <description>The engine architecture is shown in the following diagram. Node A node in a Raft cluster connects and encapsulates all underlayer service modules, and main service interfaces that are visible to users. Specifically, the leader node of a raft group calls apply(task) to commit new tasks to the state machine replication cluster made up by the Raft group, which will then apply the task to the business state machine.</description>
    </item>
    
    <item>
      <title>How to contribute to SOFAJRaft</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</guid>
      <description>Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFAJRaft bug or adding a SOFAJRaft feature, submit an issue on the SOFAJRaft GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>JRaft RheaKV user guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-rheakv-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-rheakv-user-guide/</guid>
      <description>Introduction to RheaKV RheaKV is a lightweight, distributed, and embedded KV storage library, which is included in the JRaft project as a submodule.
Features
 Embedded: RheaKV is embedded in applications in the form of Jar files. Strong consistency: RheaKV ensures data reliability and consistency based on the multi-raft distributed consensus protocol. Self-driven (not fully implemented at present): RheaKV supports automatic diagnosis, optimization, decision making, and recovery. Monitorable: RheaKV automatically reports meta information and state information by node to the PD.</description>
    </item>
    
    <item>
      <title>JRaft user guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-user-guide/</guid>
      <description>0. Basic concepts  Every request submitted by log index to a Raft group is serialized into a log entry. Each log entry has an ID, which monotonically increases within the Raft group, and the log entries are replicated to every Raft node in the group. Term is a long-type number that monotonically increases within the Raft group. You can simply take it as the number of votes. The term of an elected leader is called the leader term.</description>
    </item>
    
    <item>
      <title>Jepsen tests</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jepson-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jepson-test/</guid>
      <description>In addition to hundreds of unit tests and some chaos tests, SOFAJRaft also uses a distributed verification and fault injection testing framework Jepsen to simulate many cases, and has passed all these tests:
 Randomized partitioning with two partitions: a big one and a small one Randomly adding and removing nodes Randomly stopping and starting nodes Randomly kill -9 and starting nodes Randomly dividing a cluster into two groups, with one node connection the two to simulate network partitioning Randomly dividing a cluster into different majority groups  sofa-jraft-jepsen project address</description>
    </item>
    
    <item>
      <title>Maven dependencies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/maven-dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/maven-dependency/</guid>
      <description>pom dependencies &amp;lt;!-- jraft --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jraft-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- jsr305 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- bolt --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.5.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hessian&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- log --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.21&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- disruptor --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lmax&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;disruptor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protobuf --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protostuff --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/release-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/release-log/</guid>
      <description>1.2.5 April 1, 2019
 Bugs fixed  Fixed the conflict between jmh and the unit test code. Fixed the installation failure bug that would occur when the snapshot is too large. This bug may affect the addition of new nodes.  Features  Optimized part of the LogManagerImpl code to reduce CPU usage. Corrected some spelling errors.  Breaking changes  None   We strongly recommend that you upgrade to this version.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/road-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/road-map/</guid>
      <description>Development plans of SOFAJRaft from April to July 2019  (p1) Implement the Telnet service (or similar equivalents, the simpler the better) as an online troubleshooting means. It should be able to provide the following functions:  Raft_stat: List most or all stats of a Raft node. Metrics: Uniformly display the latest values of all metrics for the current node (the related data is scattered in the log).  (p1) Extension points: introduce the SPI mechanism.</description>
    </item>
    
    <item>
      <title>SOFAJRaft overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/overview/</guid>
      <description>This topic is a part of the Braft document. To read the Braft document, click here. The Raft algorithm and its application are comprehensively described in the Braft document. As JRaft is designed on the basis of Braft, we strongly recommend that you read the Braft document first to understand the basic principles and application of the Raft algorithm.
Distributed consensus Distributed consensus is a very fundamental problem in a distributed system.</description>
    </item>
    
    <item>
      <title>Use case of a counter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/counter-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/counter-example/</guid>
      <description>This topic mainly describes a JRaft-based distributed counter.
Scenario Save a distributed counter in a raft group of multiple nodes (servers). The counter can increment and be called while remaining consistent among all nodes. The counter can normally provide two external services when a minority of nodes fail:
 incrmentAndGet(delta): increments the value of delta and returns the incremented value. get(): gets the latest value.  Remote procedure calls (RPCs) JRaft adopts the Bolt communication framework at the underlayer, and defines two requests:</description>
    </item>
    
  </channel>
</rss>