<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFABolt on SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/</link>
    <description>Recent content in SOFABolt on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Features</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-functions/</guid>
      <description>Feature architecture SOFABolt provides the following basic features:  Basic communication functions (remoting-core)  Netty-based, highly-effective network I/O and thread model practice Connection management (lock-free connection establishment, timed disconnection, automatic reconnection) Basic communication models (oneway, sync, future, callback) Timeout control Batch unpacking and batch submission processor Heartbeat and IDLE event processing  Protocol framework (protocol-skeleton)  Commands and command processor Coding and decoding processor Heartbeat trigger  Custom private protocol implementation - RPC communication protocol (protocol-implementation)  RPC communication protocol design Flexible deserialization timing control Request processing timeout FailFast mechanism User request processor (UserProcessor) Duplex communication   Usage 1 Use SOFABolt as a remote communication framework.</description>
    </item>
    
    <item>
      <title>How to contribute to SOFABolt</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-contribution/</guid>
      <description>How to contribute SOFABolt&amp;rsquo;s code is open source. You can submit your contributions to the code after signing the required agreement.
Contributor License Agreement Alterations and modifications made to SOFABolt&amp;rsquo;s code must comply with the Contributor License Agreement.
Prerequisites Before contributing any code, you need to know how to use the Git tool and the GitHub website.
For the use of Git tools, refer to the official Pro Git book and get familiar with the tools by reading the first few chapters.</description>
    </item>
    
    <item>
      <title>Related articles</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/related-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/related-links/</guid>
      <description> Related articles  ISSUES User manual Chinese introductory article: Ant communication framework practices  </description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-roadmap/</guid>
      <description>Roadmap Version 1.5.1  Fixed code style problems in the project: https://github.com/alipay/sofa-bolt/issues/85 Fixed known bugs in the project: https://github.com/alipay/sofa-bolt/issues/82 The RPC layer supports message list dispatching from the I/O thread: https://github.com/alipay/sofa-bolt/pull/84  Version 1.6.0 Overall goal  Unify lifecycle APIs for all components Extract and incorporate network component APIs Converge configuration methods and enhance configuration scalability  Unify lifecycle APIs for all components In the current Bolt version, APIs of lifecycle management components are named inconsistently, for example:</description>
    </item>
    
    <item>
      <title>SOFABolt overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/overview/</guid>
      <description>Introduction SOFABolt is a network communication framework implemented based on Netty and developed by Ant Finance.
 Netty was developed to let Java programmers focus more on the implementation of network communication-based business logic, and not worry excessively about network low-level NIO implementation or network problems that are difficult to debug. SOFABolt was developed to let middleware developers focus more on the implementation of products&amp;rsquo; functional performance, and not on making the communication framework&amp;rsquo;s wheels over and over again.</description>
    </item>
    
    <item>
      <title>User guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-handbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-handbook/</guid>
      <description>User guide Maven coordinator &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   Check release notes for the version information.
 1. Basic functions 1.1. Implement user request processor (UserProcessor) We provide two types of user request processors: SyncUserProcessor and AsyncUserProcessor. The difference between them is that the former returns the processing result in the form of a return value in the current processor thread, while the latter has an AsyncContext stub and can call the sendResponsemethod in the current thread or an asynchronous thread to return the processing result.</description>
    </item>
    
  </channel>
</rss>