<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFAStack</title>
    <link>https://sofastack.github.io/sofastack.tech/en/</link>
    <description>Recent content on SOFAStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://sofastack.github.io/sofastack.tech/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello SOFAStack!</title>
      <link>https://sofastack.github.io/sofastack.tech/en/blog/hello-sofastack/</link>
      <pubDate>Thu, 19 Apr 2018 11:56:55 +0100</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/blog/hello-sofastack/</guid>
      <description>SOFAStack™ (Scalable Open Financial Architecture Stack) is a collection of cloud native middleware components, which are designed to build distributed systems with high performance and reliability, and have been fully validated by mission-critical financial business scenarios.
Links Home Page: https://www.sofastack.tech
Source Code: https://github.com/sofastack
Projects  SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, log space isolation and asynchronous initialization of bean.</description>
    </item>
    
    <item>
      <title>KubeCon China 2019 Co-Located Event SOFAStack Cloud Native Workshop</title>
      <link>https://sofastack.github.io/sofastack.tech/en/activities/sofastack-cloud-native-workshop/</link>
      <pubDate>Tue, 04 Jun 2019 10:20:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/activities/sofastack-cloud-native-workshop/</guid>
      <description>SOFAStack Cloud Native Workshop hosted by Ant Financial (KubeCon China 2019 Co-Located Event)  Date: Monday, 24 June, 2019 Time: 9:00 – 16:00 Location: Shanghai Expo Centre Room 616 Registration Fees: Complimentary Register here: https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/co-located-events/#sofastack-cloud-native-workshop Note: This event is hands-on, please bring your personal computer. The language of communication in this workshop is Chinese.  SOFAStack (Scalable Open Financial Architecture Stack) is a financial-grade distributed architecture independently developed and open sourced by Ant Financial.</description>
    </item>
    
    <item>
      <title>&#39;Introduction to the Raft algorithm&#39;</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/raft-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/raft-introduction/</guid>
      <description>Novel features:      Strong leader  Raft uses a stronger form of leadership than other consensus algorithms. For example, log entries only flow from the leader to other servers. This simplifies the management of replicated logs and makes Raft easier to understand.    Leader election  Raft uses randomized timers to elect leaders. This reduces election conflicts simply and rapidly.    Membership change  Raft uses a new joint consensus approach.</description>
    </item>
    
    <item>
      <title>All-in-one editor</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ide/</guid>
      <description>Open ACTS IDE In the Packages view, right click the function name annotated by @Test, and choose ACTS Function &amp;gt; Edit Test Case as shown in the following figure.
Write test data Prepare request parameters Prepare correct request parameter data for the request parameters (type, order, and quantity) of the tested method. The parameters are divided into simple and complex types. Simple parameters include parameter types String, Date, Integer, Float, Double, Long, Short, and Byte (including their corresponding basic types, such as int and float).</description>
    </item>
    
    <item>
      <title>Application packaging</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/</guid>
      <description>Introduction To understand the usage mode of Jarslink2.0, you need to have a certain understanding of the SOFAArk framework and the packaging of Ark packages and Ark Biz packages.
To ensure the consistency of reading, here is a rough description of the packaging logic of the application&amp;rsquo;s use of Jarslink2.0. The official recommendation is to jump to the above-mentioned link to obtain the necessary background knowledge.
Jarslink2.0 requires an application type of Spring Boot or SOFABoot.</description>
    </item>
    
    <item>
      <title>Application scenarios</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/user-stories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/user-stories/</guid>
      <description>RheaKV: an embedded, distributed, highly available, and strongly consistent KV storage class library that is implemented based on JRaft and RocksDB. AntQ Streams QCoordinator: uses JRaft to implement elections and meta information storage in the Coordinator cluster. Metadata management module of SOFARegistry: an IP address registration. The data held by all nodes must be consistent, and the normal data storage must not be affected when a minority of nodes fail.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-structure/</guid>
      <description>﻿## Architecture diagram Jarslink 2.0 is an Ark plugin and needs to depend on the SOFAArk container at runtime. Jarslink 2.0 is in the middle layer between the applications and the containers at runtime. Boundary interaction mode: + 1. Application boundaries: Jarslink 2.0 configures export classes that can be directly used by the applications. Such classes are loaded by Jarslink at runtime. + 2. Container boundaries: The Ark plugin can interact with the SOFAArk container by using the exposed extension points and services.</description>
    </item>
    
    <item>
      <title>Ark Biz</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-biz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-biz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ark JAR package</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-jar/</guid>
      <description>﻿This section will introduce the directory structure of standard Ark package and how to use the maven plugin of sofa-Ark-maven-plugin to package and release an Ark package.
Maven plugin The officially provided Maven plugin sofa-Ark-maven-plugin can package common Java projects or Spring Boot projects into standard-format Ark packages. Based on Fat Jar technology, we can directly start an Ark package with the java -jar command. The Maven plugin coordinates are:</description>
    </item>
    
    <item>
      <title>Ark Plugin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin/</guid>
      <description>﻿This section will introduce the standard specifications and directory structure of Ark Plugin and how to use the maven plugin of sofa-ark-plugin-maven-plugin to package and release it.
Plugin Specifications A standard Ark Plugin should meet the following specifications:
 The plugin should have a name (default is ${artifactId}). At runtime, duplicate names are not allowed. In other words, the name will be used as the unique ID of Ark Plugin;</description>
    </item>
    
    <item>
      <title>Ark container class loading mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-classloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-classloader/</guid>
      <description>Ark container class loading mechanism The plugins and business modules are managed in the Ark container. The following figure describes the class loading mechanism:
Class loading mechanism of Ark container Each Ark plugin has a separate classloader which loads a class in the following order:
 If byte codes generated by reflection are loaded, the system will throw a ClassNotFoundException to terminate the loading process. This primarily comes from our engineering practice: to avoid long time searches for the classes that can never be found.</description>
    </item>
    
    <item>
      <title>Ark container plugin mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-plugin/</guid>
      <description>Starting an Ark plug-in Ark provides the interface for starting a plug-in com.alipay.sofa.ark.spi.service.PluginActivator. The definition of the interface is as follows:
public interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; }  Once a plug-in implements this interface, and the activator attribute is configured in MANIFEST.</description>
    </item>
    
    <item>
      <title>Ark container startup process</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-startup/</guid>
      <description>Ark container start process The startup process of the Ark container is illustrated as follows:
ArkService Ark Service is a service in the Ark container. The underlying layer uses Guice to manage the service. The service is provided with the lifecycle interface com.alipay.sofa.ark.spi.service.ArkService
public interface ArkService { /** * Ark Service init * @throws ArkException */ void init() throws ArkException; /** * Ark Service dispose * @throws ArkException */ void dispose() throws ArkException; }  After the service implements the preceding lifecycle interface, the Ark Service container invokes the interface when it starts and stops.</description>
    </item>
    
    <item>
      <title>Asynchronous thread processing</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/async/</guid>
      <description>Use java.lang.Runnable in thread If you start a thread via java.lang.Runnable in the code or use a thread pool to process some businesses asynchronously, SOFATracer log context needs to be passed from the parent thread to the child thread. com.alipay.common.tracer.core.async.SofaTracerRunnable provided by SOFATracer is reponsible for completing this operation by default. You can use it as follows:
Thread thread = new Thread(new SofaTracerRunnable(new Runnable() { @Override public void run() { //do something your business code } })); thread.</description>
    </item>
    
    <item>
      <title>Basic model</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-model/</guid>
      <description>﻿## Model
Applications Jarslink manages the life cycle of multiple applications. During runtime dynamic deployment, it usually converts a Jar file entity into an abstract model Biz. + Biz: abstract model of the application at runtime
Instruction Currently, Jarslink supports the telnet protocol and accepts the entered instructions. In the future, it will also support instruction execution through APIs. Acceptable instruction types: + InstallCommand: install the application + UninstallCommand: uninstall the application + CheckCommand: check the application state + SwitchCommand: switch the application state</description>
    </item>
    
    <item>
      <title>Basic model</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/common-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/common-model/</guid>
      <description>Messages All messages are internally passed through SofaRequest and SofaResponse.
To convert to other protocols, you need to transform the messages to the objects that are to be actually transferred when calling and receiving requests.
The modules that can write SofaRequest and SofaResponse are as follows:
 Invoker Filter ServerHandler Serialization  The modules that can only read message bodies are as follows:
 Cluster Router LoadBalance  Logs The log initialization is based on the extension mechanism.</description>
    </item>
    
    <item>
      <title>Basic usage of Bolt protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-usage/</guid>
      <description>Publish Service To use SOFARPC to publish a Bolt-protocol service, you only need to add a Binding named bolt. The ways to add Bolt Binding are as follows:
XML To publish a Bolt service using XML, simply add the &amp;lt;sofa:binding.bolt&amp;gt; tag to the &amp;lt;sofa:service&amp;gt; tag:
&amp;lt;sofa:service ref=&amp;quot;sampleService&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.sample.SampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt/&amp;gt; &amp;lt;/sofa:service&amp;gt;  Annotation To publish a Bolt service using Annotation, you only need to set the bindingType of @SofaServiceBinding to bolt:</description>
    </item>
    
    <item>
      <title>Basic usage of Dubbo protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo-usage/</guid>
      <description>In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the Dubbo protocol, just set Binding to Dubbo. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.
Publish Service To publish a Dubbo service, just set the bindingType of @SofaServiceBinding to dubbo:
@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = &amp;quot;dubbo&amp;quot;)}) public class SampleServiceImpl implements SampleService { }  Reference Service To reference a Dubbo service, just set the bindingType of @SofaReferenceBinding to dubbo:</description>
    </item>
    
    <item>
      <title>Basic usage of H2C protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c-usage/</guid>
      <description>In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the H2C protocol, just set Binding to H2C. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.
Publish Service To publish an H2C service, just set the bindingType of @SofaServiceBinding to h2c:
@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = &amp;quot;h2c&amp;quot;)}) public class SampleServiceImpl implements SampleService { }  Reference Service To reference a H2C service, just set the bindingType of @SofaReferenceBinding to h2c:</description>
    </item>
    
    <item>
      <title>Basic usage of HTTP protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http-json/</guid>
      <description>In SOFARPC (Not In SOFABoot/SpringBoot)，when use Http as a protocol of server，we can use Json as the way of serialization，for some basic test scenes.
SOFARPC API Usage Service Publish ServerConfig serverConfig = new ServerConfig() .setStopTimeout(60000) .setPort(12300) .setProtocol(RpcConstants.PROTOCOL_TYPE_HTTP) .setDaemon(true); ProviderConfig&amp;lt;HttpService&amp;gt; providerConfig = new ProviderConfig&amp;lt;HttpService&amp;gt;() .setInterfaceId(HttpService.class.getName()) .setRef(new HttpServiceImpl()) .setApplication(new ApplicationConfig().setAppName(&amp;quot;serverApp&amp;quot;)) .setServer(serverConfig) .setUniqueId(&amp;quot;uuu&amp;quot;) .setRegister(false); providerConfig.export();  Service Consume Because of the Http+Json，So users can use HttpClient to start a normal call, this is a piece of code in test.</description>
    </item>
    
    <item>
      <title>Basic usage of RESTful protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-basic/</guid>
      <description>In SOFARPC, using different communication protocols is equal to using different Bindings. If you need to use the RESTful protocol, just set Binding to REST.
Publish Service When defining a RESTful service interface, you need to add meta information to the interface using the annotations in JAXRS standard, such as the following interface:
@Path(&amp;quot;sample&amp;quot;) public interface SampleService { @GET @Path(&amp;quot;hello&amp;quot;) String hello(); }   The annotations in JAXRS standard can be found in RESTEasy documentation.</description>
    </item>
    
    <item>
      <title>Benchmark data</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/benchmark-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/benchmark-performance/</guid>
      <description>Test code
Test environment and conditions  Three 16-core 20 GB memory Docker containers as the server nodes (3 replicas) Two to eight 8-core Docker containers as clients 24 Raft groups. Each server node has eight leaders responsible for processing read/right requests. Followers do not have the permission to read. The target of stress testing is the RheaKV module of JRaft. Only the put and get APIs are subject to stress testing.</description>
    </item>
    
    <item>
      <title>Bolt protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt/</guid>
      <description>Bolt protocol is a TCP-based custom protocol that performs better than HTTP. Within Ant Financial, a large number of RPCs use the Bolt protocol to communicate: * Basic usage * Calling type * Timeout control * Generic call * Serialization protocol * Custom thread pool</description>
    </item>
    
    <item>
      <title>Build applications on the cloud based on Serverless</title>
      <link>https://sofastack.github.io/sofastack.tech/en/guides/kc-serverless-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/guides/kc-serverless-demo/</guid>
      <description>As one of the developing directions of cloud native technology, Serverless architecture enables you to further improve resource utilization and focus on service development. With our workshop, you can experience new features such as quick creation of Serveless applications, automatic second-level 0-1-N scaling based on service requests, and quick troubleshooting via log viewer.
Workshop procedure Flow diagram Preview Preparation  Access to Serverless application service address Login with account and password Git clone this project to local  Step 1-1: Publish backend Java application  Select Create quickly Select Java Runtime Upload the code package balance-mng.</description>
    </item>
    
    <item>
      <title>Build microservices with SOFAStack</title>
      <link>https://sofastack.github.io/sofastack.tech/en/guides/sofastack-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/guides/sofastack-quick-start/</guid>
      <description>Procedure This guide introduces how to quickly build a microservice based on SOFAStack. It mainly includes the following steps.
 Publish service using SOFABoot and SOFARPC Call service using SOFABoot and SOFARPC View Tracer information reported by SOFATracer via ZipKin View Metrics information via SOFALookout  Architecture Tasks 1. Preparation Clone the project demo from GitHub to local
git clone https://github.com/sofastack-guides/kc-sofastack-demo.git  Import the project into IDEA or Eclipse. After import, the interface is as follows:</description>
    </item>
    
    <item>
      <title>Calling type</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-type/</guid>
      <description>SOFARPC provides a variety of calling types under the Bolt protocol to meet different scenarios.
Synchronous In the synchronous calling type, after the client initiates a call, it will wait for the server to return the result and then perform subsequent operations. This is the default calling type of SOFARPC.
Asynchronous In the asynchronous calling type, after the client initiates a call, it will not wait for the result from the server but continue to execute the subsequent business logic.</description>
    </item>
    
    <item>
      <title>Client built-in extension metrics</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/client-ext-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/client-ext-metrics/</guid>
      <description>Client built-in extension metrics The extension modules currently in effect by default are lookout-ext-jvm and lookout-ext-os (from v1.5.0).
JVM thread    metric name metric tags specification     jvm.threads.totalStarted  &amp;mdash;   jvm.threads.active  &amp;mdash;   jvm.threads.peak  &amp;mdash;   jvm.threads.daemon  &amp;mdash;    JVM class loading    metric name metric tags specification     jvm.classes.unloaded  &amp;mdash;   jvm.</description>
    </item>
    
    <item>
      <title>Client call flow</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/client-invoke-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/client-invoke-flow/</guid>
      <description>The client module is a complex module which contains cluster, router, address holder，connection holder, and load balancer, and interacts with proxy, registry center and other modules.
See the following flow chart:</description>
    </item>
    
    <item>
      <title>Client configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/client-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/client-configuration/</guid>
      <description>Client configuration example lookoutConfig.setProperty(LookoutConfig.LOOKOUT_AGENT_HOST_ADDRESS,&amp;quot;127.0.0.1&amp;quot;);  Description of server configuration item    Configuration item Corresponding SpringBoot configuration item Default value Description     lookout.enable com.alipay.sofa.lookout.enable true Function switch, it defaults to true. If you change it to false (empty objects and empty methods), then all metrics comsume almost no memory and computing resource   lookout.max.metrics.num com.alipay.sofa.lookout.max-metrics-num 5000 Maximum number limit of metrics, over which will be automatically ignored   lookout.</description>
    </item>
    
    <item>
      <title>Client usage</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/client-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/client-quick-start/</guid>
      <description>1. Create a Maven project After deploying the servers, we can create a new Maven project to use services provided by SOFARegistry. Create a new Maven project, and then import the following dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  2. Publish data // Create a client instance. RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(&amp;quot;127.0.0.1&amp;quot;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); // Create a publisher registry. String dataId = &amp;quot;com.alipay.test.demo.service:1.0@DEFAULT&amp;quot;; PublisherRegistration registration = new PublisherRegistration(dataId); // Register the registry with the client and publish data.</description>
    </item>
    
    <item>
      <title>Communicate across applications</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/</guid>
      <description>Project address
 Introduction During merged deployment, Biz packages can communicate with each other by releasing and referencing JVM services apart from using the RPC framework. This sample project is intended to demonstrate how two Biz packages communicate by JVM services.
Within the biz-jvm-invocation-sample project, there are three sub-projects whose functions are as follows: + facade: A common Java module that defines the SampleJvmService interface.
package me.qlong.tech.service; public interface SampleJvmService { String service(); }   app-one: A SOFABoot Web application that defines a simple rest request and use the @SofaReference annotation to reference the SampleJvmService.</description>
    </item>
    
    <item>
      <title>Communication protocols</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/protocol/</guid>
      <description>SOFARPC supports different communication protocols and currently supports Bolt, RESTful and Dubbo. For details, please refer to the corresponding document of each protocol: * Bolt Protocol * Basic usage * Calling type * Timeout control * Generic call * Serialization protocol * Custom thread pool * RESTful * Basic usage * Custom filter * Integrate Swagger * Dubbo * Basic usage * H2C * Basic usage</description>
    </item>
    
    <item>
      <title>Compile Jarslink project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-compile/</guid>
      <description>How to compile  Install JDK7 and above, and Maven 3.2.5 and above.
 Directly download the code and then execute the following command:
cd sofa-jarslink mvn clean install  Note: you cannot compile the code under a sub-directory (i.e., sub-module). Since there are many modules, the configuration is restricted to the root directory only to avoid repetitive configuration of some packaging plugins such as the formatting plugin and License plugin.</description>
    </item>
    
    <item>
      <title>Compile SOFARPC project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/how-to-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/how-to-build/</guid>
      <description>Install JDK7 or later and Maven 3.2.5 or later.
 Download the codes directly and execute the following commands:
cd sofa-rpc mvn clean install  Note: You can not build under a subdirectory (namely the submodule). Because there are too many SOFARPC modules, if every submodule needs to be installed and deployed, there will be much useless records in the repository. This issue is considered in the process of designing the SOFARPC project structure.</description>
    </item>
    
    <item>
      <title>Configuration parameters</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration/</guid>
      <description>Provide all the parameters that can be configured. * Service publishing and reference configuration * Warm-up forwarding configuration * Fault tolerance configuration</description>
    </item>
    
    <item>
      <title>Consul</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-consul/</guid>
      <description>To use Consul as service registry center, you need to add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ecwid.consul&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;consul-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  and need to configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500  The value after consul: is the connection address of the consul. If you need to set some other parameters, you can also configure as follows:
com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1&amp;amp;b=2  </description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-contribution/</guid>
      <description>You can visit Development Route first to learn more about development tasks and future planning.
 Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.
 Refer to the Git official books for the Git tool usage. The first few chapters will help you get a quick start. Read Git collaboration process through  GitHub Code Contribution Process Submitting an issue Whether you want to fix a bug of SOFAArk or add a new feature of SOFAArk, you have to submit an issue to describe your demand before you submit the code on GitHub address in SOFAArk.</description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-contribution/</guid>
      <description>You can go into the development route to learn more about development tasks and future planning.
 Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.
 For the use of git tools, refer to official books on git and get familiarized by reading the first few chapters. For the git collaboration process, refer to the article named Git Collaboration Process.</description>
    </item>
    
    <item>
      <title>Contribution</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/contributing/</guid>
      <description>Before you read this document, you are suggested to read the SOFARPC development roadmap to learn about development tasks and future plans.
 Preparations Before you contribute code, you need to learn the basic use of Git tool and GitHub website.
 For how to use the Git tool, see Git official documenation and pay attention to the first few chapters. For Git collaboration process, see Git collaboration process.</description>
    </item>
    
    <item>
      <title>Copyright</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/notice/</guid>
      <description>SOFARPC uses some third-party open-source components which include but not limited to:
 Major dependencies
 Netty under Apache License 2.0 SLF4j under MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0  Extended dependencies
 protobuf under New BSD License Snappy under New BSD License dubbo under Apache License 2.0   </description>
    </item>
    
    <item>
      <title>Copyright statement</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/notice/</guid>
      <description> Copyright statement of dependent components SOFADashboard uses some third-party open-source components, including but not limited to:
 Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License SOFABolt under Apache License 2.0 SOFABolt under Apache License 2.0 Curator under Apache License 2.0  </description>
    </item>
    
    <item>
      <title>Copyright statement</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/notice/</guid>
      <description>Copyright statement of dependent components SOFARegistry uses some third-party open-source components, including but not limited to:
 Spring under Apache 2.0 license Spring Boot under Apache 2.0 license Netty under Apache License 2.0 SLF4j under the MIT License jersey under CDDL Version 1.1
 SOFAJRaft under Apache License 2.0 SOFABolt under Apache License 2.0 SOFAHessian under Apache License 2.0  If you find anything we have missed, please let us know.</description>
    </item>
    
    <item>
      <title>Create a SOFABoot application</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/</guid>
      <description>Project address
 Introduction Jarslink 2.0 is available for both Spring Boot and SOFABoot; we just need to add the specified dependencies. To be convenient, it is recommended to use Jarslink 2.0 in the form of SOFABoot projects. This sample project is intended to demonstrate how to quickly reform a Spring Boot project into a SOFABoot project.
Reform After creating a Spring Boot project in the official Spring Boot website, we only need to introduce the SOFABoot dependencies.</description>
    </item>
    
    <item>
      <title>Custom filter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-filter/</guid>
      <description>SOFARPC provides a good extensibility mechanism, which provide SPI capabilities for each module. SOFARPC uses multiple filters to intercept requests and responses. These filters can be customized and extended by users. The execution order of custom filters is after the built-in filters. The procedure is as follows:
Bolt filter 1 Create a new custom filter.
public class CustomFilter extends Filter { @Override public boolean needToLoad(FilterInvoker invoker) { return true; } @Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { SofaResponse response = invoker.</description>
    </item>
    
    <item>
      <title>Custom router</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-router/</guid>
      <description>The route service address in SOFARPC is abstracted into a processing chain, and is processed by each router. Like filter, SOFARPC provides the same extensibility for router.
@Extension(value = &amp;quot;customerRouter&amp;quot;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override public boolean needToLoad(ConsumerBootstrap consumerBootstrap) { return true; } @Override public List&amp;lt;ProviderInfo&amp;gt; route(SofaRequest request, List&amp;lt;ProviderInfo&amp;gt; providerInfos) { return providerInfos; }  Create a extension file META-INF/services/sofa-rpc/com.</description>
    </item>
    
    <item>
      <title>Custom thread pool</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-thread-pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/custom-thread-pool/</guid>
      <description>SOFARPC supports custom business thread pools. A separate business thread pool can be set up for the specified service, isolated from SOFARPC&amp;rsquo;s global business thread pool. Multiple services can share a single thread pool.
SOFARPC requires that the type of custom thread pool must be com.alipay.sofa.rpc.server.UserThreadPool.
Use XML If you publish the service using XML, you can first set the bean of the thread pool whose class is com.alipay.sofa.rpc.server.UserThreadPool, and then set the bean in the thread-pool-ref attribute of &amp;lt;sofa:global-attrs&amp;gt; tag.</description>
    </item>
    
    <item>
      <title>Dashboard client</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/dashboard-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/dashboard-client/</guid>
      <description> You can view basic information of your application on SOFADashboard, including the IP address, ports, and health check status. This feature is dependent on the SOFADashboard client. If you want to display the information about an application on the SOFADashboard control page, import the sofa-dashboard-client dependency.
&amp;lt;denpendency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofa-dashboard-client&amp;lt;/artifactId&amp;gt; &amp;lt;/denpendency&amp;gt;  Function display </description>
    </item>
    
    <item>
      <title>DataSource Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-datasource/</guid>
      <description>In this document will demonstrate how to use SOFATracer to track of Datasource.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce SOFATracer Introduce SOFATracer dependency in the new Spring Boot project:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Introduce h2database dependencies For convenience, we use the h2database memory database for test. So, we need to introduce the following dependencies:</description>
    </item>
    
    <item>
      <title>DataSource log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-datasource/</guid>
      <description>Datasource Log Format SOFATracer tracks the standard JDBC data source and outputs the chain data of SQL statement execution, in the default JSON format.
DataSource digest log (datasource-client-digest.log) The data is output in JSON format. Each key meaning is as follows:
   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Database.</description>
    </item>
    
    <item>
      <title>Dependency management</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/dependency-management/</guid>
      <description>﻿SOFABoot is based on Spring Boot. It means SOFABoot manages SOFA middleware dependencies and provides the Starter for Spring Boot, facilitating the use of SOFA middleware in Spring Boot.
SOFABoot dependency management You must load SOFABoot&amp;rsquo;s management dependencies before using SOFA middleware. In a way similar to use Spring Boot, add the configuration tag &amp;lt;parent/&amp;gt; in the project settings:
&amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofaboot-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sofa.boot.version}&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt;  Where ${sofa.boot.version} represents the SOFABoot version (refer to release history).</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/deployment/</guid>
      <description>1. Environment preparation To use SOFARegistry, you need to prepare the basic environment first. SOFARegistry depends on the following environment:
 Linux, UNIX, Mac are supported. JDK8 Compile it with Apache Maven 3.2.5 or later versions.  2. Resource Quota -cpu: 4c -memory: 8G -disk: 50G
3. Two deployment modes  Integrated deployment  Package and integrate the three roles of meta, data, and session into one jvm, which can be deployed on a standalone machine or a cluster.</description>
    </item>
    
    <item>
      <title>Developer guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/developer-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/developer-guide/</guid>
      <description>1. How to compile  Install JDK7 or later versions, and Maven 3.2.5 or later versions. Directly download the code, and execute the following command in the code directory:
 mvn clean install  2. Version release Version number ACTS uses a three-digit version number in the form of major, minor, and patch, for example, 1.0.1.
For more information, see https://semver.org/.
 Major version number: All versions within a major version number must be compatible with each other.</description>
    </item>
    
    <item>
      <title>Development guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/development-use-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/development-use-guide/</guid>
      <description> Develope guide of code contribution First refer to the basic Notes for code contribution  Note the test case coverage; Note the code format;  Verify samples  Import the sample Maven project separately; Modify the dependency version in the corresponding Pom file; Verify that samples can work correctly as well.  </description>
    </item>
    
    <item>
      <title>Direct call</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/peer-to-peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/peer-to-peer/</guid>
      <description>SOFARPC supports scenarios where a specified address is called.
The use of direct call in Java API is as follows, only set the direct connection address:
ConsumerConfig&amp;lt;HelloService&amp;gt; consumer = new ConsumerConfig&amp;lt;HelloService&amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(&amp;quot;bolt://127.0.0.1:12201&amp;quot;);  The use of direct call in XML is as follows:
&amp;lt;sofa:reference interface=&amp;quot;com.alipay.sample.HelloService&amp;quot; id=&amp;quot;helloService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:route target-url=&amp;quot;127.0.0.1:12200&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:reference&amp;gt;  The use of direct call in Annotation is as follows:
@SofaReference(binding = @SofaReferenceBinding(bindingType = &amp;quot;bolt&amp;quot;, directUrl = &amp;quot;127.</description>
    </item>
    
    <item>
      <title>Disaster recovery</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault/</guid>
      <description>Fault Recover Including Fault-Hystrix and Fault-Tolerance features.</description>
    </item>
    
    <item>
      <title>Distributed consensus - Raft and JRaft</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/consistency-raft-jraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/consistency-raft-jraft/</guid>
      <description>Distributed consensus algorithm Understand distributed consensus  Multiple participants reach a complete consensus on one thing: one conclusion for one thing. The conclusion cannot be overthrown.  Typical distributed consensus algorithms  Paxos: It is considered as the foundation of distributed consensus algorithms. Other algorithms are its variants. However, the Paxos paper only provides the process of a single proposal, without describing the details of multi-paxos that is required for state machine replication.</description>
    </item>
    
    <item>
      <title>Dubbo</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/dubbo/</guid>
      <description>SOFARPC provides support for the Dubbo protocol, making it convenient for you to interface with existing Dubbo service. * Basic usage</description>
    </item>
    
    <item>
      <title>Dubbo Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-dubbo/</guid>
      <description>Dubbo Integration In this document will demonstrate how to use SOFATracer to track of Dubbo, this example address.
Prepare Environment The versions of the framework components used in this case are as follows:
 SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8  This case includes three submodules:
 tracer-sample-with-dubbo-consumer service provider tracer-sample-with-dubbo-provider service consumer tracer-sample-with-dubbo-facade service interface define  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot&amp;rsquo;s dependency.</description>
    </item>
    
    <item>
      <title>Dubbo log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-dubbo/</guid>
      <description>Dubbo Log Format SOFATracer integrates Dubbo and outputs the requested link log data format. The default is JSON data format.
Dubbo service consumer digest log（dubbo-client-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   traceId TraceId   spanId SpanId   span.kind span Type   local.app Current application name   protocol protocol   service service interface   method service method   invoke.</description>
    </item>
    
    <item>
      <title>Engine architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/engine-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/engine-architecture/</guid>
      <description>The engine architecture is shown in the following diagram. Node A node in a Raft cluster connects and encapsulates all underlayer service modules, and main service interfaces that are visible to users. Specifically, the leader node of a raft group calls apply(task) to commit new tasks to the state machine replication cluster made up by the Raft group, which will then apply the task to the business state machine.</description>
    </item>
    
    <item>
      <title>Extension mechanism</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/extension-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/extension-loader/</guid>
      <description>ExtensionLoader To ensure that all steps of SOFARPC have sufficient scalability, SOFARPC defines a very flexible extension mechanism in which all extension implementations are equal.
This mechanism is very useful for both SOFARPC developers and users. SOFARPC abstracts itself into multiple modules which have no explicit dependencies on each other and interact via SPI.
This extension mechanism abstracts the interaction method of SPI. If you have read the documents about Filter and Router, you may have such experience.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-api/</guid>
      <description>Customize different engine stages You can rewrite APIs provided by ActsTestBase in the test script or in the base class.
 Rewrite the prepare, execute, check, and clear actions. For example, you can add some actions before or after super.prepare(). Rewrite the process method. You can add some actions before or after super.process() to reorchestrate the entire script. For example, you can add some personalized steps in the existing clear &amp;gt; prepare &amp;gt; execute &amp;gt; check process.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/faq/</guid>
      <description>Q: What should I do if NoSuchMethodError is returned? Generally, this error is returned in the case of dependency conflicts. Commonly known dependency conflicts are listed as follows. Exclude the corresponding dependencies when you encounter relevant conflicts.
Log conflict commons-logging conflict &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt;  logback-classic conflict Rule out logback-classic by the location of the conflict. For example, application dependencies spring-boot-starter-logging and spring-test conflict with each other.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/faq/</guid>
      <description>Common issues Q: Is SOFARPC the version used inside Ant Financial? Yes, SOFARPC has excellent extension interfaces, and the version for internal use just has some additional extension implementations based on the open source version. For example, the cloud-based commercial version integrates the Ant Financial Technology&amp;rsquo;s shared registry center, Distributed System Tracing (DST) and other products. The version for internal use integrates Ant Financial&amp;rsquo;s internal registry center, LDC router and other individual extensions.</description>
    </item>
    
    <item>
      <title>Fault tolerance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-tolerance/</guid>
      <description>Usually, a service have multiple service providers in a cluster. Some of the service providers may have persistent connections still survived due to network, configuration, long-term fullgc, full thread pool, hardware failure and others, but the program cannot respond properly. The stand-alone fault tolerance function can degrade the exceptional service providers so that the client requests can be pointed to the healthy node. When the exceptional nodes become normal, the standalone fault tolerance function will restore the nodes, so that the client requests can gradually distribute traffic to the nodes.</description>
    </item>
    
    <item>
      <title>Fault tolerance configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-fault-tolerance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-fault-tolerance/</guid>
      <description>Fault tolerance automatically monitors the RPC calls, degrades the weight of the failed node, and recovers the weight when the node restored to normal. The bolt protocol is currently supported.
In SOFABoot, you only need to configure fault tolerance parameters to application.properties. You can select not to configure all parameters but only configure the parameters that you care about. Then, the remaining parameters will take the default values. Note that rpc.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-functions/</guid>
      <description>Feature architecture SOFABolt provides the following basic features:  Basic communication functions (remoting-core)  Netty-based, highly-effective network I/O and thread model practice Connection management (lock-free connection establishment, timed disconnection, automatic reconnection) Basic communication models (oneway, sync, future, callback) Timeout control Batch unpacking and batch submission processor Heartbeat and IDLE event processing  Protocol framework (protocol-skeleton)  Commands and command processor Coding and decoding processor Heartbeat trigger  Custom private protocol implementation - RPC communication protocol (protocol-implementation)  RPC communication protocol design Flexible deserialization timing control Request processing timeout FailFast mechanism User request processor (UserProcessor) Duplex communication   Usage 1 Use SOFABolt as a remote communication framework.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/features/</guid>
      <description> Features  Service publishing and reference Communication Protocol  Bolt protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool  RESTful protocol  Basic usage Custom filter Integrated Swagger  Dubbo  Basic usage  H2C  Basic usage   Registry center Direct call Load balancing Custom filter Custom router addressing Call retry Tracing  SOFATracer Skywalking  Custom thread pool Link data transparent transmission Warm-up weight Fault tolerance Node cross-language call Graceful shutdown  </description>
    </item>
    
    <item>
      <title>Framework preparation</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-ready/</guid>
      <description>Framework preparation Before reading, you can download and install ACTS IDE and import the ACTS framework by refering to Quick start.
This topic mainly describes the encoding, datasource configuration, and quick configuration to help you use the ACTS framework.
Encoding Ensure that the encoding of ACTS and that of the system code are consistent, specifically, ensure that the encoding for script generation and the encoding of the IDEA workspace are consistent with the encoding of your application code.</description>
    </item>
    
    <item>
      <title>Functional interface support</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/functional-interface-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/functional-interface-support/</guid>
      <description>Since Java 8, Java has introduced various @FunctionalInterface interfaces to support functional programming. Generally, Java functions will be executed in a ForkJoinPool. If some thread variables of Tracer are not passed in, it will cause the loss of Trace information.
Therefore, in SOFATracer XXX version, a series of wrapper classes for these @FunctionalInterface interfaces has been added to ensure that trace-related information can be transferred correctly and transparently. The following is an example of the Consumer interface, just need to change the construction of Consumer to SofaTracerConsumer, and pass the original Consumer as the parameter of the constructor of SofaTracerConsumer:</description>
    </item>
    
    <item>
      <title>Generic call</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/generic-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/generic-invoke/</guid>
      <description>Generic calls provide the ability for clients to initiate calls without having to rely on the server`s interface. Currently, the generic call of SOFARPC only supports using Hessian2 as the serialization protocol under the Bolt communication protocol.
SOFABoot environment Publish Service There is nothing special about publishing a service. Just publish the service normally, for example:
&amp;lt;!-- generic --&amp;gt; &amp;lt;bean id=&amp;quot;sampleGenericServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.generic.SampleGenericServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;sampleGenericServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.generic.SampleGenericService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt/&amp;gt; &amp;lt;/sofa:service&amp;gt;  Reference Service &amp;lt;sofa:reference jvm-first=&amp;quot;false&amp;quot; id=&amp;quot;sampleGenericServiceReference&amp;quot; interface=&amp;quot;com.</description>
    </item>
    
    <item>
      <title>Get started with SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-sofa-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-sofa-boot/</guid>
      <description>This document introduces how to use SOFARPC for service publishing and reference in SOFABoot.
You can get the code sample of this document by clicking here. Note that the code sample requires a local installation of the zookeeper environment. If not, you need to remove the com.alipay.sofa.rpc.registry.address configuration in application.properties to use the local file as a registry center.
Create a project  Prepare environment: SOFABoot requires JDK7 or JDK8 and needs to be compiled with Apache Maven 2.</description>
    </item>
    
    <item>
      <title>Get started with SOFARPC</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/getting-started-with-rpc/</guid>
      <description>This document introduces how to apply SOFARPC for service publishing and reference. This example will simulate a server locally to listen to a port and publish a service, and the client will reference the service for direct call.
You can get the code sample of this document by clicking here.
Create a project You need to install JDK 6 or above and Maven 3 or above.
Create a new Maven project and introduce SOFARPC dependency.</description>
    </item>
    
    <item>
      <title>Graceful shutdown</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/graceful-shutdown/</guid>
      <description>Graceful shutdown includes two parts. One is the RPC framework as client, and the other is the RPC framework as server.
As server As the server, the RPC framework should not be violently shutdown.
com.alipay.sofa.rpc.context.RpcRuntimeContext  Added a ShutdownHook to the static initialization snippet:
// Add jvm shutdown event if (RpcConfigs.getOrDefaultValue(RpcOptions.JVM_SHUTDOWN_HOOK, true)) { Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() { @Override public void run() { if (LOGGER.isWarnEnabled()) { LOGGER.warn(&amp;quot;SOFA RPC Framework catch JVM shutdown event, Run shutdown hook now.</description>
    </item>
    
    <item>
      <title>H2C</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/h2c/</guid>
      <description> H2C protocol SOFARPC provides support for the H2C protocol, which can be used to publish and reference services.
 Basic usage  </description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/http/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Health check</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/health-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/health-check/</guid>
      <description>SOFABoot provides Readiness Check to enhance Spring Boot&amp;rsquo;s Health Check. If you need to use the SOFA middleware, you are advised to use the Health Check extension of SOFABoot to launch application examples in a more elegant way.
Enable Health Check To enable the Health Check feature in SOFABoot, you only need to import the following starter:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;healthcheck-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Without the Health Check extension, users still can perform Liveness Check with native Spring Boot Actuator directly relying on the HealthIndicator interface.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/contributing/</guid>
      <description>Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to the article Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing an ACTS bug or adding an ACTS feature, submit an issue on ACTS GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/contribution/</guid>
      <description>We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.
 Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/contributing/</guid>
      <description>We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.
 Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of git tools, refer to official books on gitand get familiarized by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFARegistry bug or adding a SOFARegistry feature, submit an issue on the SOFARegistry GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>How to contribute to SOFABolt</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-contribution/</guid>
      <description>How to contribute SOFABolt&amp;rsquo;s code is open source. You can submit your contributions to the code after signing the required agreement.
Contributor License Agreement Alterations and modifications made to SOFABolt&amp;rsquo;s code must comply with the Contributor License Agreement.
Prerequisites Before contributing any code, you need to know how to use the Git tool and the GitHub website.
For the use of Git tools, refer to the official Pro Git book and get familiar with the tools by reading the first few chapters.</description>
    </item>
    
    <item>
      <title>How to contribute to SOFAJRaft</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</guid>
      <description>Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.
 For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFAJRaft bug or adding a SOFAJRaft feature, submit an issue on the SOFAJRaft GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.</description>
    </item>
    
    <item>
      <title>HttpClient Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-httpclient/</guid>
      <description>HttpClient Integration In this document will demonstrate how to use SOFATracer to track of HttpClient, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;!-- SOFATracer dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- HttpClient dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;!-- 4.5.X --&amp;gt; &amp;lt;version&amp;gt;4.5.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;httpasyncclient&amp;lt;/artifactId&amp;gt; &amp;lt;!-- 4.X --&amp;gt; &amp;lt;version&amp;gt;4.1.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer under the project&amp;rsquo;s application.</description>
    </item>
    
    <item>
      <title>HttpClient log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-httpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-httpclient/</guid>
      <description>HttpClient Log Format After integrating tracer-httpclient-plugin, SOFATracer outputs the link data requested by HttpClient in JSON data by default.
HttpClient digest log (httpclient-digest.log) The data is output in JSON format. Each key meaning is as follows:
   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.url Request URL   Method Request HTTP method   Result.</description>
    </item>
    
    <item>
      <title>Hystrix fault tolerance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/fault-hystrix/</guid>
      <description>SOFARPC is integrated Hystrix provides fuse capability and is currently available in the first preview version. More information about Hystrix can be found in Hystrix Official Documentation, Hystrix integration capabilities are provided primarily by ScienJus, thanks for contribution.
Next, let&amp;rsquo;s talk about how to experience the fuse capability of Hystrix. The following example uses the SOFARPC 5.5.0 version. More Hystrix configuration and SOFABoot integration usage will be provided in subsequent releases, so stay tuned.</description>
    </item>
    
    <item>
      <title>Installation guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-setup-zookeeper-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-setup-zookeeper-installation/</guid>
      <description>Installation guide To use Istio in a non-Kubernetes environment, you must complete the following critical tasks first:
 Configure the Istio API server for the Istio control plane. You can also use MemStore to launch Pilot for demonstration purpose. Manually add SOFAMosn to all microservice instances and start in SideCar mode. Make sure that all requests are routed through SOFAMosn.  Set control plane The Istio control plane consists of four main services: Pilot, Mixter, Citadel, and API server.</description>
    </item>
    
    <item>
      <title>Integrate SOFABoot health check</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/</guid>
      <description>Project address
 Introduction SOFABoot extends the Health Check of Spring Boot. For detailed information, see SOFABoot Documentation. This sample project is intended to demonstrate how to integrate the Health Check component of SOFABoot during merged deployment. Differences between the Health Check in merged deployment and that of a single SOFABoot application are as follows: + During static merged deployment, all Biz packages must pass the Health Check before the Ark package can be started normally.</description>
    </item>
    
    <item>
      <title>Integrate with Swagger</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-swagger/</guid>
      <description>Since rpc-sofa-boot-starter version 6.0.1, SOFARPC provide the ability to integrate RESTful service with Swagger easily.
If you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment and you want to enable Swagger support, first, you need add Swagger dependencies in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.swagger.core.v3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;swagger-jaxrs2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;20.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Then you need add a configuration com.alipay.sofa.rpc.restSwagger=true in application.properties.
Finally, visit http://localhost:8341/swagger/openapi and you can get all the Swagger OpenAPI information about SOFARPC&amp;rsquo;s RESTful services.</description>
    </item>
    
    <item>
      <title>Interactive instruction</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/</guid>
      <description>Jarslink2.0 supports receiving dynamic commands at runtime to manage the Biz package lifecycle. Before starting an Ark package that has introduced the Jarslink2.0 plugin, you can send commands through the telnet connection protocol with port 1234. For example, execute telnet ip 1234 to enter the Jarslink2.0 command interface and type &amp;ldquo;help&amp;rdquo; in the interface to obtain all relevant command manuals. Next we will introduce the syntax of each Jarslink2.0 command.</description>
    </item>
    
    <item>
      <title>Introduction to Jarslink</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/</guid>
      <description>Introduction Jarslink2.0 is a functional SOFABoot plugin developed based on SOFAArk. It manages the merged deployment of multiple applications on top of the SOFAArk container, with the following features: + It supports runtime dynamic installation and uninstallation of applications. + It supports runtime application hot replacement capability to ensure service continuity. + For cross-application communication, it supports the JVM services publish and reference. Cross-application communication can base on RPC framework or internal JVM services.</description>
    </item>
    
    <item>
      <title>Introduction to Pilot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-readme/</guid>
      <description>Pilot introduction The SOFAMesh project forked the Istio project to enhance Pilot&amp;rsquo;s capabilities. Currently, the ongoing enhancements are focused on the following three areas:
 Support ZooKeeper as a registry center, and support SOFA, DUBBO and other microservice frameworks using ZooKeeper as a registry center. Support the common protocol framework. Use a common protocol, and support multiple protocols simultaneously based on Kubernetes DNS. Add register agent to support the container models of SOFA, Dubbo and HSF.</description>
    </item>
    
    <item>
      <title>Introduction to SOFAArk</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-readme/</guid>
      <description>﻿## Product description SOFAArk is a light-weight，java based classloader isolation framework open sourced by Ant Financial. Based on Fat Jar technology, the container can pack simple single-module Java applications or Spring Boot applications into a self-contained executable Fat Jar, known as an Ark package. When the java -jar command is used to start an Ark package embedded with the SOFAArk class isolation container, the SOFAArk container will start, and it then starts each Ark plugin and application.</description>
    </item>
    
    <item>
      <title>Introduction to SOFAMosn</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/sofa-mosn-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/sofa-mosn-readme/</guid>
      <description>MOSN, the short name of Modular Observable Smart Network, is a powerful proxy acting as Service Mesh&amp;rsquo;s data plane like Envoy but written in Go. MOSN supports Envoy and Istio&amp;rsquo;s APIs and can be integrated with Istio, so we use MOSN instead of Envoy in SOFAMesh. The initial version of MOSN was jointly contributed by Ant Financial and UC Business Unit of Alibaba, and we look forward to the community to participate in the follow-up development and build an open source excellent project together.</description>
    </item>
    
    <item>
      <title>JRaft RheaKV user guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-rheakv-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-rheakv-user-guide/</guid>
      <description>Introduction to RheaKV RheaKV is a lightweight, distributed, and embedded KV storage library, which is included in the JRaft project as a submodule.
Features
 Embedded: RheaKV is embedded in applications in the form of Jar files. Strong consistency: RheaKV ensures data reliability and consistency based on the multi-raft distributed consensus protocol. Self-driven (not fully implemented at present): RheaKV supports automatic diagnosis, optimization, decision making, and recovery. Monitorable: RheaKV automatically reports meta information and state information by node to the PD.</description>
    </item>
    
    <item>
      <title>JRaft user guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jraft-user-guide/</guid>
      <description>0. Basic concepts  Every request submitted by log index to a Raft group is serialized into a log entry. Each log entry has an ID, which monotonically increases within the Raft group, and the log entries are replicated to every Raft node in the group. Term is a long-type number that monotonically increases within the Raft group. You can simply take it as the number of votes. The term of an elected leader is called the leader term.</description>
    </item>
    
    <item>
      <title>Java SDK</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/java-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/java-sdk/</guid>
      <description>1. Create a Maven project and import the dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  2. Create the SOFARegistry client instance The key code for creating the SOFARegistry client instance is as follows:
RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(&amp;quot;127.0.0.1&amp;quot;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init();  Properties related to SOFARegistry are specified by the DefaultRegistryClientConfigBuilder class, which provides the following key properties:
public class DefaultRegistryClientConfigBuilder { private String instanceId; private String zone = DEFAULT_ZONE; private String registryEndpoint; private int registryEndpointPort = 9603; private String dataCenter = DEFAULT_DATA_CENTER; private String appName; private int connectTimeout = 3000; private int socketTimeout = 3000; private int invokeTimeout = 1000; private int recheckInterval = 500; private int observerThreadCoreSize = 5; private int observerThreadMaxSize = 10; private int observerThreadQueueLength = 1000; private int syncConfigRetryInterval = 30000; }     Property Type Description     instanceId String The ID of the instance.</description>
    </item>
    
    <item>
      <title>Jepsen tests</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jepson-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/jepson-test/</guid>
      <description>In addition to hundreds of unit tests and some chaos tests, SOFAJRaft also uses a distributed verification and fault injection testing framework Jepsen to simulate many cases, and has passed all these tests:
 Randomized partitioning with two partitions: a big one and a small one Randomly adding and removing nodes Randomly stopping and starting nodes Randomly kill -9 and starting nodes Randomly dividing a cluster into two groups, with one node connection the two to simulate network partitioning Randomly dividing a cluster into different majority groups  sofa-jraft-jepsen project address</description>
    </item>
    
    <item>
      <title>Lifecycle</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/</guid>
      <description>In the Interactive Instructions section, we have described the set of instructions that Jarslink2.0 supports. In this section, we will focus on all the possible state transitions behind these instructions in the following diagram of a Biz package being loaded from a static file to the runtime and to being uninstalled.
The diagram above basically shows the complete life cycle of a Biz package. Now we will explain the direction of each state transition in the diagram:</description>
    </item>
    
    <item>
      <title>Link data transparent transmission</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-chain-pass-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/invoke-chain-pass-data/</guid>
      <description>The link data transparent transmission function allows the applications to store data in the calling context, and then any applications in the entire link can operate the data. This feature is used as follows. Data can be put into the request and response of the link for transparent transmission, and then the applications can get the corresponding data from the link.
RpcInvokeContext.getContext().putRequestBaggage(&amp;quot;key_request&amp;quot;,&amp;quot;value_request&amp;quot;); RpcInvokeContext.getContext().putResponseBaggage(&amp;quot;key_response&amp;quot;,&amp;quot;value_response&amp;quot;); String requestValue=RpcInvokeContext.getContext().getRequestBaggage(&amp;quot;key_request&amp;quot;); String responseValue=RpcInvokeContext.getContext().getResponseBaggage(&amp;quot;key_response&amp;quot;);  Example For example, in the scenario of A -&amp;gt; B -&amp;gt; C, the request arguments set by A are transmitted to B and C.</description>
    </item>
    
    <item>
      <title>Load balance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/load-balance/</guid>
      <description>SOFARPC provides a variety of load balancing algorithms and currently supports the following five types:
   Type Name Description     random Random algorithm The default load balancing algorithm.   localPref Local preference algorithm Firstly detect whether the service is published locally, if not, random algorithm is used.   roundRobin Round Robin algorithm Method-level polling, the polling is carried out separately to each method, without affecting each other.</description>
    </item>
    
    <item>
      <title>Local</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-local/</guid>
      <description>To use local file as service registry center, you can configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg  The /home/admin/registry/localRegistry.reg is the directory of the local files to be used.
On windows OS, the above path indicates the following directory:
com.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg  </description>
    </item>
    
    <item>
      <title>MOSN 0.1.0 performance report</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/reference-performance-report010/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/reference-performance-report010/</guid>
      <description>Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.
It is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.
 For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately.</description>
    </item>
    
    <item>
      <title>MOSN 0.1.0 performance report</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/reference-performance-report010/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/reference-performance-report010/</guid>
      <description>Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.
It is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.
 For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately.</description>
    </item>
    
    <item>
      <title>Management commands</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/management-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/management-api/</guid>
      <description>1. registry-meta 1.1 Push switch When publishing new SOFARegistry versions, to minimize the impact on services, and avoid large amounts of push messages caused by large-scale service endpoint changes during the server restart process, we will temporarily turn off the push service at the management layer. After publishing the new SOFARegistry version, we can turn on the push service and restore the normal working conditions. Data subscription and service publication information generated for the period when the push service is turned off will be subject to global push for compensation.</description>
    </item>
    
    <item>
      <title>Maven dependencies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/maven-dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/maven-dependency/</guid>
      <description>pom dependencies &amp;lt;!-- jraft --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jraft-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- jsr305 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- bolt --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.5.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hessian&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- log --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.21&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- disruptor --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lmax&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;disruptor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protobuf --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protostuff --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.</description>
    </item>
    
    <item>
      <title>Merged deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/</guid>
      <description>In Jarslink 2.0, merged deployment refers to loading and running multiple Biz packages in the same JVM. In the section Application Packaging, we have described the relationship between the Spring Boot/SOFABoot application and the Biz package. We may think that merged deployment here refers to loading and running multiple Spring Boot/SOFABoot applications in the same JVM.
It is mentioned at the end of Application Packaging that a Biz package can be released to a remote repository through the mvn deploy command, similar to releasing common Jar packages.</description>
    </item>
    
    <item>
      <title>Models</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-model/</guid>
      <description>Quickly understand of ACTS models When you write a test case, you need to prepare some database tables, request parameter data of methods, or data for validating database tables and responses. You can save such data in models, and import it to preparation data or validation data when you edit the test case. This allows you to conveniently reuse data. Currently, ACTS models can be divided into database models and class models.</description>
    </item>
    
    <item>
      <title>Modular development</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/modular-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/modular-development/</guid>
      <description>Since version 2.4.0, SOFABoot has started to support modular development capability based on Spring context isolation. To better understand the concept of modular development of SOFABoot, let&amp;rsquo;s distinguish several common forms of modularization:
 Modularization based on code organization: This is the most common form. Codes with different functions are placed under different Java projects at development time and into different jar packages at compile time. At runtime, all Java classes are under the same classpath without any isolation; Modularization based on Spring context isolation: Use the Spring context to perform isolation of different function modules.</description>
    </item>
    
    <item>
      <title>Module configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-module/</guid>
      <description>The SOFABoot module combines a regular JAR with some SOFABoot-specific configurations, which enables a JAR to be identified by SOFABoot and modularized.
There are two differences between a complete SOFABoot module and a regular JAR:
 A SOFABoot module contains a sofa-module.properties file, where the name and the dependencies of the module are defined. We can place one or more Spring configuration files in the SOFABoot module&amp;rsquo;s META-INF/spring directory; and SOFABoot will automatically load them as Spring configurations for that module.</description>
    </item>
    
    <item>
      <title>Module parallel startup</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/parallel-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/parallel-start/</guid>
      <description>SOFABoot will calculate the dependency tree based on the Require-Module. For example, the following dependency tree represents that Modules B and C depend on Module A, Module E depends on Module D, and Module F depends on Module E:
The dependency tree guarantees that Module A starts before Modules B and C, Module D before Module E, and Module E before Module F, but without defining the start orders between Modules B and C, or Modules B, C and Modules D, E and F, which can start either in serial or parallel.</description>
    </item>
    
    <item>
      <title>Nacos</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-nacos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-nacos/</guid>
      <description>SOFARPC already supports using Nacos as a service registry. Suppose you have deployed Nacos Server locally according to Nacos&amp;rsquo;s Quick Start, and the service discovery port is set to 8848 by default.
To use Nacos as a service registry in SOFARPC, you only need to add the following configuration to application.properties:
com.alipay.sofa.rpc.registry.address=nacos://127.0.0.1:8848  If you use SOFARPC directly, not SOFABoot, you need to add dependency of nacos, notice that version is what you want to use in your project.</description>
    </item>
    
    <item>
      <title>NodeJS support</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/node-and-java-communicate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/node-and-java-communicate/</guid>
      <description>If you need to call SOFARPC through NodeJs, you can start by following this document.
Install First install the SOFARPC Node.
https://github.com/sofastack/sofa-rpc-node
Use the following command:
$ npm install sofa-rpc-node --save  Code sample Expose an RPC service and publish it to registry center &#39;use strict&#39;; const { RpcServer } = require(&#39;sofa-rpc-node&#39;).server; const { ZookeeperRegistry } = require(&#39;sofa-rpc-node&#39;).registry; const logger = console; // 1. Create a Zookeeper registry client const registry = new ZookeeperRegistry({ logger, Address: &#39;127.</description>
    </item>
    
    <item>
      <title>OkHttp Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-okhttp/</guid>
      <description>OkHttp Integration In this document will demonstrate how to use SOFATracer to track of OkHttp, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Dependency introduction &amp;lt;!-- SOFATracer dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- okhttp dependency --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.squareup.okhttp3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;okhttp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.</description>
    </item>
    
    <item>
      <title>OkHttp log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-okhttp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-okhttp/</guid>
      <description>OkHttp Log Format SOFATracer integrates OkHttp and outputs the requested link log data format. The default is JSON data format.
OkHttp digest log（okhttp-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.</description>
    </item>
    
    <item>
      <title>OpenFeign Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-openfeign/</guid>
      <description>OpenFeign Integration In this document will demonstrate how to use SOFATracer to track of OpenFeign.
Prepare Environment The versions of the framework components used in this case are as follows:
 Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8  This case includes two submodules:
 tracer-sample-with-openfeign-provider service provider tracer-sample-with-openfeign-consumer service consumer  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot&amp;rsquo;s dependency.</description>
    </item>
    
    <item>
      <title>OpenFeign log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-openfeign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-openfeign/</guid>
      <description>OpenFeign Log Format SOFATracer integrates Spring Cloud OpenFeign and outputs the requested link log data format. The default is JSON data format.
Spring Cloud OpenFeign digest log（feign-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/overview/</guid>
      <description>MOSN&amp;rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.
MOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/overview/</guid>
      <description>MOSN&amp;rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.
MOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/overview/</guid>
      <description>Introduction SOFALookout is a lightweight and open source middleware service of Ant Financial that solves the metrics and monitoring issues of the system. The services it provides include: Event logging, collecting, processing, storing, and querying of Metrics. The open source project consists of two separate parts, the client and server side services.
Client-side service SOFALookout Client is a Java SDK that helps developers log events of metrics in project code.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/overview/</guid>
      <description>SOFARPC is a Java-based RPC service framework open sourced by Ant Financial, which provides remote service call between applications, high scalability and fault tolerance features. Currently, all RPC calls of Ant Financial businesses use SOFARPC. SOFARPC provides users with functions such as load balancing, traffic forwarding, link tracing, link data transparent transmission, and fault removal.
In addition, SOFARPC supports different protocols, currently including bolt, RESTful, dubbo, and H2C. Bolt is a network communication framework based on Netty developed by Ant Financial Services Group.</description>
    </item>
    
    <item>
      <title>Package into Ark JAR</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-demo/</guid>
      <description>Introduction This sample project shows how to build an executable-ark-jar based on a springboot project with the tool of sofa-ark-maven-plugin.
Preparation As this project depends on the ark-plugin generated by the project of sample-ark-plugin, please ensure the sample sample-ark-plugin installed in your local maven repository before run this project.
Tools The Maven plugin of sofa-ark-maven-plugin is provided to build a standard executable-ark-jar, and just needs some simple configurations. Its maven coordinates is:</description>
    </item>
    
    <item>
      <title>Package into Ark Plugin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/</guid>
      <description>Introduction This sample project demonstrates how to use Maven plugins to package a general Java project into an Ark plugin that meets the standard specifications.
Background In actual development, dependency conflicts often occur. Suppose we have developed a class library named sample-lib, and it might conflict with the existing dependencies when the business application is imported. At this point, we hope the library can be isolated from other business dependencies, without negotiating with each other over dependency package versions.</description>
    </item>
    
    <item>
      <title>Print traceId and spanId in application log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/print-traceid-spanid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/print-traceid-spanid/</guid>
      <description>Print traceId And spanId To Application Log SLF4J provides MDC (Mapped Diagnostic Contexts), which supports you to define and modify log output formats and content. This document introduces the SLF4J MDC feature integrated in SOFATracer, which allows you to output the current SOFATracer context TraceId and SpanId with simply modifying the log configuration file.
Prerequisites In order to properly print the TraceId and SpanId parameters in the logs of the application, the log programming interface needs to be programmed for SLF4J.</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programming/</guid>
      <description>Describe several methods to use SOFARPC in different environments. * Use API in non-Spring environment * Use XML in SOFABoot environment * Use Annotation in SOFABoot environment * Use dynamic API in SOFABoot environment</description>
    </item>
    
    <item>
      <title>Project sample</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-samples/</guid>
      <description> Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.   Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  </description>
    </item>
    
    <item>
      <title>Project sample</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-run-samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-run-samples/</guid>
      <description> Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.   Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  </description>
    </item>
    
    <item>
      <title>Project sample</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-samples/</guid>
      <description>Some sample projects are provided in the source project to assist in the use of the project. The readme file of the sample project has additional instructions for use, and you need to import these sample projects separately into IDE.
Client-side sample project  lookout-client-samples-java   This sample project demonstrates how to use and configure the client in code form in a normal Java project.
 lookout-client-samples-boot   This sample project demonstrates how to use and configure the client in a SpringBoot (or SofaBoot) project.</description>
    </item>
    
    <item>
      <title>Publish and reference JVM services</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/module-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/module-service/</guid>
      <description>﻿SOFABoot provides developers with three ways to publish and reference JVM services
 XML Annotation Programming API  XML Service Publish First, we need to define a Bean:
&amp;lt;bean id=&amp;quot;sampleService&amp;quot; class=&amp;quot;com.alipay.sofa.runtime.test.service.SampleServiceImpl&amp;quot;&amp;gt;  Then, publish the Bean as a SOFA JVM service by using the Spring extension tag provided by SOFA.
&amp;lt;sofa:service interface=&amp;quot;com.alipay.sofa.runtime.test.service.SampleService&amp;quot; ref=&amp;quot;sampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.jvm/&amp;gt; &amp;lt;/sofa:service&amp;gt;  In the preceding configuration, the interface parameter indicates the interface for releasing services, and the ref parameter indicates the Bean to be published as a JVM service.</description>
    </item>
    
    <item>
      <title>Put Service Mesh into practice with CloudMesh</title>
      <link>https://sofastack.github.io/sofastack.tech/en/guides/kc-cloud-mesh-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/guides/kc-cloud-mesh-demo/</guid>
      <description>To run this demo, you should sign up an Ant Financial technology account. Please see Ant Finanical Official Site to see more details.
Demo content Service Mesh applies the communication capabilities between services to the infrastructure, thus decoupling and lightweighting applications.
However, Service Mesh itself is still complex. CloudMesh can easily implement Service Mesh technology by hosting Service Mesh on the cloud.
With our workshop, you can easily deploy applications developed in multiple programming languages ​​to CloudMesh, thereby experiencing the capabilities of Service Mesh.</description>
    </item>
    
    <item>
      <title>Quick start</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/getting-started/</guid>
      <description>This topic comprises four parts:
 Part 1: Install the ACTS IDE visual editor on Intellij IDEA. Part 2: Import the ACTS dependency to a multi-module project. Part 3: Establish the ACTS framework in the test module to manage ACTS test cases. Part 4: Generate the ACTS test script.  1. Install ACTS IDE We recommend that you use Intellij IDEA 2017. For the sake of your data security, please download the ACTS IDE installation package from the following source only: Click to download ACTS IDE.</description>
    </item>
    
    <item>
      <title>Quick start</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/quick-start/</guid>
      <description>This topic helps you quickly download, install, and use SOFADashboard on your computer.
Prepare the environment sofa-dashboard-backend needs to be run in a Java environment. Make sure that it can be used normally in the following runtime environments:
 JDK 1.8+: Download and Configure. Maven 3.2.5+: Download and Configure.  sofa-dashboard-frontend uses the Ant Design Pro scaffold. For more information about the frontend environment, see Ant Design.
Initialize the database  MySQL version: 5.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-setup/</guid>
      <description>This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.
Note: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.
Prepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-setup/</guid>
      <description>This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.
Note: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.
Prepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/quick-start/</guid>
      <description>﻿In this document, we will create a Spring Boot project and introduce the basic dependencies of SOFABoot as well as its Health Check expansion capability, to demonstrate how to get started quickly with SOFABoot.
Environment Preparation To use SOFABoot, we need to prepare the basic environment first. SOFABoot depends on the following environment: - JDK7 or JDK8 - Needs to be compiled with Apache Maven 3.2.5 or above
Create Project SOFABoot is directly built on Spring Boot, so it can be generated by Spring Boot Generators.</description>
    </item>
    
    <item>
      <title>Quick start guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/componentaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/componentaccess/</guid>
      <description>SOFATracer integration component list reference:Introduction To SOFATracer, Please pay attention to the SOFATracer version and JDK version of different components when using.
Prepare Environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments: - JDK7 or JDK8 - Apache Maven 3.2.5+ required for compilation
Samples List The following Samples projects are all SOFABoot projects (also supported in the SpringBoot project). For information on how to create SOFABoot projects, please refer to SOFABoot quick start.</description>
    </item>
    
    <item>
      <title>Quick start guide for SOFABoot project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/quick-start-client-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/quick-start-client-boot/</guid>
      <description>This project demonstrates how to use SOFALookout in SOFABoot and connect to the Actuator of Spring Boot. If you want to connect to Prometheus or other Registry, see the Registry section.
Create a SpringBoot (or SofaBoot) project Create a new Spring Boot application (In case of SOFABoot project, import to SOFABoot as described in SOFABoot Documentation - Dependency Management.
Introduce Lookout&amp;rsquo;s Starter dependency Introduce the following dependency in pom.xml:</description>
    </item>
    
    <item>
      <title>Quick start guide for common Java project</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/quick-start-client-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/quick-start-client-java/</guid>
      <description>Quick start for client Common Java Project Add the Maven dependency of the client to the application:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa.lookout&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lookout-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lookout.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Lookout-client relies on the lookout-reg-server module by default (supports reporting metrics data to the lookout server). If you want to use a different type of registry (such as lookout-reg-prometheus), then add the corresponding dependency.
Before starting to use the SOFALookout Client, you must firstly build a global client instance (com.</description>
    </item>
    
    <item>
      <title>REST Cors</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-cors/</guid>
      <description> For REST，we provide a Filter to support cors now.
SOFARPC API Usage For users who use SOFARPC API directly，they can add parameters in ServerConfig.
Map&amp;lt;String,String&amp;gt; parameters=new HashMap&amp;lt;String, String&amp;gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,&amp;quot;abc.com,cdf.com&amp;quot;); serverConfig.setParameters(parameters);  XML Usage You can add this configuration to application.properties
com.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com  </description>
    </item>
    
    <item>
      <title>REST filter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful-filter/</guid>
      <description>For REST, we designed a JAXRSProviderManager manager class. It takes effect on the server when the service starts.
com.alipay.sofa.rpc.server.rest.RestServer#registerProvider  For the user-defined Filter class, you can call it after the initialization is complete.
com.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance  To register filter, since the custom Filter follows REST specification, you need to implement the following interface:
javax.ws.rs.container.ContainerResponseFilter or javax.ws.rs.container.ContainerRequestFilter  After the REST server is started, if using bare SOFARPC, you need to register filter first before starting the service.</description>
    </item>
    
    <item>
      <title>RESTful</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/restful/</guid>
      <description>SOFARPC supports RESTful protocol, making it convenient for users to publish an interface in the manner of RESTful. * Basic usage * Custom Filter * Integrate Swagger</description>
    </item>
    
    <item>
      <title>RPC application parameter configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/application-rpc-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/application-rpc-config/</guid>
      <description>In SOFABoot, the RPC framework provides some configuration parameters at the application level, and supports application-level parameter configuration, such as port and thread pool, which are bound by Spring Boot&amp;rsquo;s @ConfigurationProperties. The binding attribute class is com.alipay.sofa.rpc.boot.config.SofaBootRpcProperties, and the configuration prefix is as follows:
static final String PREFIX = &amp;quot;com.alipay.sofa.rpc&amp;quot;;  Then in the application.properties file, you can currently configure the following options. Also, you can write the codes based on your own coding habits as well as according to the Spring Boot specification, camel, underline and so on.</description>
    </item>
    
    <item>
      <title>RPC publishing and reference configuration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/configuration-common/</guid>
      <description>ProviderConfig    Attribute Name Default value Comment     id ID Generated automatically    application Application object Empty ApplicationConfig    interfaceId Service interface (unique identifier)  Use the actual interface class for both normal calls and return calls.   uniqueId Service tag (unique identifier)     filterRef Filter configuration example  List   filter Filter configuration alias  separated by commas   registry Registry center on the server  List   methods Method-level configuration  Map&amp;lt;String, MethodConfig&amp;gt;   serialization Serialization protocol hessian2    register Whether to register true It depends on the implementation and may not take effect.</description>
    </item>
    
    <item>
      <title>Register agent</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-register-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-register-agent/</guid>
      <description>Register agent TBD</description>
    </item>
    
    <item>
      <title>Related articles</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/related-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/related-links/</guid>
      <description> Related articles  ISSUES User manual Chinese introductory article: Ant communication framework practices  </description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/release-notes/</guid>
      <description>To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/release-notes/</guid>
      <description>To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-release/</guid>
      <description>Release history For more information, refer to: https://github.com/sofastack/sofa-ark/releases</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-release/</guid>
      <description>﻿## Release history For more information, refer to: https://github.com/sofastack/sofa-jarslink/releases</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/release-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/release-node/</guid>
      <description>For more information, see https://github.com/sofastack/sofa-dashboard/releases.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/release-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/release-log/</guid>
      <description>1.2.5 April 1, 2019
 Bugs fixed  Fixed the conflict between jmh and the unit test code. Fixed the installation failure bug that would occur when the snapshot is too large. This bug may affect the addition of new nodes.  Features  Optimized part of the LogManagerImpl code to reduce CPU usage. Corrected some spelling errors.  Breaking changes  None   We strongly recommend that you upgrade to this version.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-notes/</guid>
      <description>For more information, see https://github.com/sofastack/sofa-registry/releases.</description>
    </item>
    
    <item>
      <title>Release notes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/release-notes/</guid>
      <description>To learn more, see https://github.com/sofastack/sofa-rpc/releases.</description>
    </item>
    
    <item>
      <title>Report data to Zipkin</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/report-to-zipkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/report-to-zipkin/</guid>
      <description>This example demonstrates how to remotely report link data to Zipkin by configuring SOFATracer in an application that integrates SOFATracer.
The following examples demonstrate how to use them in SOFABoot/SpringBoot projects and non-SOFABoot/SpringBoot projects, respectively.
Prepare environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments: + JDK7 or JDK8 + Apache Maven 3.2.5+ required for compilation
Introduce SOFABoot After creating a Spring Boot project, you need to introduce the SOFABoot dependency.</description>
    </item>
    
    <item>
      <title>RestTemplate Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-resttemplate/</guid>
      <description>RestTemplate Integration In this document will demonstrate how to use SOFATracer to track of RestTemplate, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;!-- SOFABoot version unified management --&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.properties file, including spring.</description>
    </item>
    
    <item>
      <title>RestTemplate log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-resttemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-resttemplate/</guid>
      <description>RestTemplate Log Format SOFATracer integrates RestTemplate and outputs the requested link log data format. The default is JSON data format.
RestTemplate digest log（resttemplate-digest.log） The data is output in JSON format. Each key meaning is as follows:
   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.</description>
    </item>
    
    <item>
      <title>Retry strategy</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/retry-invoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/retry-invoke/</guid>
      <description>SOFARPC supports a framework-level retry strategy when the cluster mode is FailOver (SOFARPC uses FailOver mode by default). Retry is only initiated if there is a framework-level exception or a timeout exception on the server. If the business itself throws an exception, the service will not be called again. SOFARPC does not perform any retry by default.
 Note: Although the system will retry calling in case of timeout exception, the server still needs to guarantee the idempotency of the service.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-roadmap/</guid>
      <description>Roadmap Version 1.5.1  Fixed code style problems in the project: https://github.com/alipay/sofa-bolt/issues/85 Fixed known bugs in the project: https://github.com/alipay/sofa-bolt/issues/82 The RPC layer supports message list dispatching from the I/O thread: https://github.com/alipay/sofa-bolt/pull/84  Version 1.6.0 Overall goal  Unify lifecycle APIs for all components Extract and incorporate network component APIs Converge configuration methods and enhance configuration scalability  Unify lifecycle APIs for all components In the current Bolt version, APIs of lifecycle management components are named inconsistently, for example:</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/road-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/road-map/</guid>
      <description>Development plans of SOFAJRaft from April to July 2019  (p1) Implement the Telnet service (or similar equivalents, the simpler the better) as an online troubleshooting means. It should be able to provide the following functions:  Raft_stat: List most or all stats of a Raft node. Metrics: Uniformly display the latest values of all metrics for the current node (the related data is scattered in the log).  (p1) Extension points: introduce the SPI mechanism.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/roadmap/</guid>
      <description>Task list Some of the existing internal features will be available in subsequent iterations.
The features that have been implemented are listed in the following table. You are welcome to claim the tasks and make contributions.
   Task type Task Degree of difficulty Claimant and time Planned completion time Progress Related issues     Documentation Document translation Low       Code Flexible persistent connection management Low    #56   Code etcd registry center implementation Medium @wynn5a</description>
    </item>
    
    <item>
      <title>Roadmap and task claim</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/roadmap/</guid>
      <description> Tasks The following table lists the features that have not yet been implemented. We encourage you to claim the tasks and make a contribution.
   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document SOFADashboard Parameter Configuration Guide Simple       Code Support for SOFARegistry Medium       Code Support for Docker Medium       Code Support for Kubernetes Medium       Code Support for Apollo Medium       Code Frontend optimization Medium        </description>
    </item>
    
    <item>
      <title>Roadmap and task claims</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/roadmap/</guid>
      <description>Roadmap Tasks We have some internal implementations of some new features, which will be released along with the iterations when sorted out.
Features that are not implemented yet are listed in the following table. We encourage you to claim the tasks and contribute to SOFARegistry.
   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document Document Translation Low       Code Support for Spring Cloud Medium       Code Data self-check High       Code Blacklist filtering Medium       Code SOFARegistry Dashboard High       Code Support for other microservice frameworks Medium       Code Support for Docker &amp;amp; Kubernetes High       Code Multi-language client support High        Version iteration plan v5.</description>
    </item>
    
    <item>
      <title>SOFAActs overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/overview/</guid>
      <description>AntCoreTest (ACTS) is a white-box test framework developed by Ant Financial based on years&amp;rsquo; testing knowledge and experience with the financial-level distributed architecture for the purpose of providing enterprises with a highly efficient, precise, and automated interface testing services. In addition to general testing capabilities such as data-driven testing provided by conventional open source frameworks like TestNG, ACTS offers new features such as model-driven testing, visualized editing, and a standard process engine to assist engineers with efficient and high quality test case compilation as well as standard and precise test validation for interface testing.</description>
    </item>
    
    <item>
      <title>SOFAArk control</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/ark-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/ark-console/</guid>
      <description>SOFAArk offers a variety of methods to support multi-application (module) consolidation and deployment, including command line-based control and API-based control. SOFAArk control is an implementation of SOFADashboard&amp;rsquo;s control over APIs. SOFAArk control is implemented by pushing commands to and parsing commands in ZooKeeper.
SOFAArk control mainly provides the following functions:
 Plug-in registration: registers the ark-biz package with SOFADashboard as basic data processors. Application association: binds the ark-biz package with host applications.</description>
    </item>
    
    <item>
      <title>SOFABolt overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/overview/</guid>
      <description>Introduction SOFABolt is a network communication framework implemented based on Netty and developed by Ant Finance.
 Netty was developed to let Java programmers focus more on the implementation of network communication-based business logic, and not worry excessively about network low-level NIO implementation or network problems that are difficult to debug. SOFABolt was developed to let middleware developers focus more on the implementation of products&amp;rsquo; functional performance, and not on making the communication framework&amp;rsquo;s wheels over and over again.</description>
    </item>
    
    <item>
      <title>SOFABoot 2.5.x upgrade</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_2_5_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_2_5_x/</guid>
      <description>﻿# Upgrade SOFABoot from 2.3.x/2.4.x to 2.5.x SOFABoot 2.3.x/2.4.x is developed based on Spring Boot 1.4.2.RELEASE, SOFABoot 2.5.x is developed based on Spring Boot 1.5.x. When upgrading SOFABoot 2.3.x/2.4.x to SOFABoot 2.5.x, we should pay special attention to the differences between the Spring Boot 1.5.x upgrade and the Spring Boot 1.4.x upgrade.
Renamed Spring Boot Starters  spring-boot-starter-ws &amp;ndash;&amp;gt; spring-boot-starter-web-services spring-boot-starter-redis &amp;ndash;&amp;gt; spring-boot-starter-data-redis  Endpoint Security Control Spring Boot 1.</description>
    </item>
    
    <item>
      <title>SOFABoot 3.0 upgrade</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_3_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/upgrade_3_x/</guid>
      <description>﻿## Preface As a Spring Boot-based development framework open sourced by Ant Financial, SOFABoot provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.
We have received a lot of feedback from community users since SOFABoot was open sourced in April 2018. We are also very pleased to see many community users take an active part in building the SOFAStack open source, which greatly increases our determination to prosper SOFAStack community and ecosystem.</description>
    </item>
    
    <item>
      <title>SOFABoot Extension Point</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/extension/</guid>
      <description>SOFABoot supports modular isolation. But in actual usage scenarios, There is one case that beans in one module sometimes need to open some entries for another module to expand. SOFABoot draws on and uses the Nuxeo Runtime project and the nuxeo project and expands on it, provides the ability to extend points with Spring, We call it Extension Point. Usage Using extension point capabilities in SOFABoot requires the following three</description>
    </item>
    
    <item>
      <title>SOFABoot dynamic module practice</title>
      <link>https://sofastack.github.io/sofastack.tech/en/guides/kc-sofastack-dynamic-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/guides/kc-sofastack-dynamic-demo/</guid>
      <description>Background kc-sofastack-demo has introduced how to quickly build an e-commerce microservice application and has implemented the service calling link tracking and application status monitoring.
In e-commerce system, the platforms often are not satisfied with the default product listing order, and always want to arrange some products in the conspicuous places. Also, there are some cases where the platforms would like to show different products to different users based on the collected user behaviors.</description>
    </item>
    
    <item>
      <title>SOFABoot overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/overview/</guid>
      <description>SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.
You can view all the release notes in Release History. The correspondence between SOFABoot version and Spring Boot version is as follows:</description>
    </item>
    
    <item>
      <title>SOFABoot profile</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofaboot-profile/</guid>
      <description>﻿Since 3.1.X Spring framework has started to support the profile function: Bean Definition Profiles, SOFABoot support modular-level profiling, it will determine whether a module can be started when each module is getting started.
Activating Module Using Module-Profile To enable the SOFABoot profiling, we need to add the com.alipay.sofa.boot.active-profiles field in the application.properties file. The value of this field is a comma-separated string denoting a list of profiles allowed to be activated.</description>
    </item>
    
    <item>
      <title>SOFADashboard overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/overview/</guid>
      <description>SOFADashboard is designed to implement unified management over SOFA framework components, including service governance and SOFAArk control. All technology stacks used by SOFADashboard are developed and constructed based on open-source community products, such as Ant Design Pro, SOFABoot, Spring, and MyBatis.
Currently, service governance and SOFAArk control of SOFADashboard are dependent on ZooKeeper. Therefore, you need to ensure the ZooKeeper service is available when you decide to use SOFADashboard. You also need to ensure that MySQL is available, because SOFAArk control and deployment uses MySQL for resource data storage.</description>
    </item>
    
    <item>
      <title>SOFAJRaft overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/overview/</guid>
      <description>This topic is a part of the Braft document. To read the Braft document, click here. The Raft algorithm and its application are comprehensively described in the Braft document. As JRaft is designed on the basis of Braft, we strongly recommend that you read the Braft document first to understand the basic principles and application of the Raft algorithm.
Distributed consensus Distributed consensus is a very fundamental problem in a distributed system.</description>
    </item>
    
    <item>
      <title>SOFAMesh overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/overview/</guid>
      <description>This repository is deprecated. It will contribute to istio directly instead of developing in a forked repo. Please go to see Istio’s doc.
SOFAMesh is a large-scale implementation scheme of Service Mesh based on Istio. On the basis of inheriting the powerful functions and rich features of Istio, in order to meet the performance requirements in large-scale deployments and to respond to the actual situation in the implementation, the following improvements are made:</description>
    </item>
    
    <item>
      <title>SOFARPC Metrics</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/sofarpc-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/sofarpc-metrics/</guid>
      <description>SOFARPC Metrics SOFARPC currently measures two metrics.
Server thread pool    metric name metric tags specification     rpc.bolt.threadpool.config bolt thread pool configuration Mainly includes thread pool configuration information for RPC server   rpc.bolt.threadpool.active.count  Running thread of the current thread pool   rpc.bolt.threadpool.idle.count  Idle thread of the current thread pool   rpc.bolt.threadpool.queue.size  Tasks in the queue of the current thread pool    Client call information    metric name metric tags specification     rpc.</description>
    </item>
    
    <item>
      <title>SOFARPC architecture</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/structure-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/structure-intro/</guid>
      <description>SOFARPC is divided into two layers from bottom to top:
 Core layer: It contains the core components of RPC (such as various interfaces, APIs and common packages) and some common implementations (such as random load balancing algorithms). Function implementation layer: All users of the function implementation layer are equal, and all functions are implemented based on the extension mechanism.  The internal version specific for Ant Financial just has some internal extension based on the open source version.</description>
    </item>
    
    <item>
      <title>SOFARPC log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-sofarpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-sofarpc/</guid>
      <description>SOFARPC Log Format After SOFARPC (v5.4.0 and above) is integrated in SOFATracer, the link data is output in JSON format by default. Each field meaning is as follows:
RPC client digest log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type (bolt, rest) Service interface information Method name Current thread name Calling type (sync, callback, oneway, future) Routing record (DIRECT, REGISTRY) Target IP Target appName Local machine IP Return code (00=success; 01=business exception; 02=RPC logic error; 03=timeout failure;04=routing failure) Request serialization time (in ms) Response deserialization time (in ms) Response size (in Byte) Request size (in Byte) Client connection duration (in ms) Total call duration (in ms) Local client port Transparently transmitted baggage data (kv format)  Example:</description>
    </item>
    
    <item>
      <title>SOFARegistry</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-sofa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-sofa/</guid>
      <description>SOFARPC already supports using SOFARegistry as a service registry. Suppose you have deployed SOFARegistry Server locally according to SOFARegistry&amp;rsquo;s Quick Start, and the service discovery port is set to 9603 by default.
To use SOFARegistry as a service registry in SOFARPC, you only need to add the following configuration to application.properties:
com.alipay.sofa.rpc.registry.address=sofa://127.0.0.1:9603  The current version of SOFARegistry is supported:
SOFARPC: 5.5.2, SOFABoot: 2.6.3。
Because of the time of SOFABoot, users need to specify the version of rpc starter.</description>
    </item>
    
    <item>
      <title>SOFARegistry overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/overview/</guid>
      <description>Product introduction SOFARegistry is a production-level, low-latency, and highly available service registry powered by Ant Financial. SOFARegistry was developed on the basis ConfigServer of Taobao. After more than ten years of business development of Ant Financial, SOFARegistry has evolved into the fifth generation architecture. Currently, SOFARegistry not only provides full support to Ant Financial and its numerous partners, but also embraces the open source community. Built on an AP architecture, SOFARegistry support s message push in seconds.</description>
    </item>
    
    <item>
      <title>SOFATracer</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/sofatracer-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/sofatracer-usage/</guid>
      <description>Since SOFARPC 5.4.0, the SOFATracer function is integrated, which is enabled by default. It can output the data information in the link.
By default, the output data is in JSON format. The involved fields are as follows:
RPC client digest Log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type Service interface information Method name Current thread name Calling type Routing record Target IP Local machine IP Return code Request serialization duration Response deserialization duration Response size (in Byte) Request size (in Byte) Client connection duration Total duration for call Local client port Transparently transmitted baggage data (kv format)  Example:</description>
    </item>
    
    <item>
      <title>SOFATracer Tools</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/utils/</guid>
      <description>SOFATracer Tools Get Span through SOFATracer context In the process of a distributed link call, the component that integrates SOFATracer generates a Span and caches it in the SOFATracer context. And the context is cached in ThreadLocal. You can get the current SOFATracer context in the following way:
SofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext();  Through the SOFATracer context SofaTraceContext, you can add, delete, modify, check, and empty the cached Spans. As the developers responsible for integrating components, we will add, delete, modify and check the SOFATracer context to integrate distributed link tracking.</description>
    </item>
    
    <item>
      <title>SOFATracer configuration items</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/configuration/</guid>
      <description>SOFATracer configuration item After introducing SOFATracer, you can add related configuration items in Spring Boot configuration file application.properties to customize the behaviors of SOFATracer.
For SOFATracer log output directory, you can configure logging.path in application.properties, then the log output path is ${logging.path}/tracelog; if logging.path is not configured, the default output path is ${user.home}/logs/tracelog.
   Configuration item Description Default value     logging.path log output directory SOFATracer output logs to logging.</description>
    </item>
    
    <item>
      <title>SOFATracer overview</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/overview/</guid>
      <description>SOFATracer is a distributed link tracing system based on OpenTracing specification developed by Ant Financial. Its core concept is to concatenate the same request distributed on each service node with a global TraceId. By the unified TraceId, it can record the various network call information in the call link in logs, and can remotely report the call records to Zipkin for presentation, thus implementing perspective network call.
Features Distributed link tracing solution based on OpenTracing specification SOFATracer is a solution that provides link tracing based on and improved from the OpenTracing specification.</description>
    </item>
    
    <item>
      <title>Sampling modes</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/sampler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/sampler/</guid>
      <description>Sampling Currently,SOFATracer provides two sampling modes. One is the fixed sampling rate based on BitSet. The other is the sampling provided to the user to customize the implementation sampling.The following example shows how to use it.
This example is based on the tracer-sampled-with-springmvc project,Except for application.properties, everything else is the same.
Sampling mode based on fixed sampling rate Add sampling related configuration items in application.properties #Sampling rate 0~100 com.alipay.sofa.tracer.samplerPercentage=100 #Sampling type name com.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/scale/</guid>
      <description>1. Integrated deployment 1.1 Scale up registry-integration Assume that three registry-integration servers have been deployed currently, which are namely node1, node2, and node 3. The new node to be added to the cluster is node 4.
Operation steps:
Step 1. Deploy the new registry-integration node
First, deploy registry-integration.tgz on node4 by referencing the Deployment topic. Note that you need to set the nodes.metaNode configuration item on node4 to a 4-server endpoint list:</description>
    </item>
    
    <item>
      <title>Scripts</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-acts/usage-script/</guid>
      <description>Quickly understand ACTS scripts Do you have to frequently compile test cases? Are you frustrated by the following problems?
 You have to repeat assertEquals, which is definitely not creative. Missing an assert may lead to false success, while mistaking one may ruin your mood. If the scenario is complex, the test code may be longer than the service code, which is painful. You have to migrate utility classes every time you start writing test cases for a new application.</description>
    </item>
    
    <item>
      <title>Seata distributed transaction practice</title>
      <link>https://sofastack.github.io/sofastack.tech/en/guides/kc-seata-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/guides/kc-seata-demo/</guid>
      <description>SEATA Demo for SOFAStack Cloud Native Workshop on KubeCon China 2019
AT mode 1.Introduce maven dependencies Introduce the following dependencies into the POM file of the parent project (seata-demo-at/pom.xml):
... &amp;lt;properties&amp;gt; ... &amp;lt;seata.version&amp;gt;0.6.1&amp;lt;/seata.version&amp;gt; &amp;lt;netty4.version&amp;gt;4.1.24.Final&amp;lt;/netty4.version&amp;gt; &amp;lt;/properties&amp;gt; ... &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.seata&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;seata-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${seata.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.seata&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;seata-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${seata.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${netty4.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt;  Introduce the following dependencies into the POM file of the stock-mng project (seata-demo-at/stock-mng/pom.</description>
    </item>
    
    <item>
      <title>Select Service Registry</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-usage/</guid>
      <description>SOFABoot RPC Starter provides a variety of registry center options as well as convenient configurations.
Currently, bolt, rest, and dubbo all support Zookeeper as registry center. In addition, bolt and rest support the local file system as registry center, which is generally used for testing.</description>
    </item>
    
    <item>
      <title>Serialization protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/serialization/</guid>
      <description>When using the Bolt communication protocol, SOFARPC can choose different serialization protocols, which can be hessian2 or protobuf currently.
By default, SOFARPC uses hessian2 as the serialization protocol. If you need to set the serialization protocol to protobuf, you need to configure the following settings when publishing the service:
&amp;lt;sofa:service ref=&amp;quot;sampleService&amp;quot; interface=&amp;quot;com.alipay.sofarpc.demo.SampleService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs serialize-type=&amp;quot;protobuf&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:service&amp;gt;  That is to add the &amp;lt;sofa:global-attrs&amp;gt; tag to the &amp;lt;sofa:binding.bolt&amp;gt; tag and set the serialize-type attribute to protobuf.</description>
    </item>
    
    <item>
      <title>Server deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/server-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/server-quick-start/</guid>
      <description>Local development Starting SOFARegistry locally is to use the H2 database as the configuration database used by the registry, which can be started directly com.alipay.sofa.registry.server.integration.RegistryApplication#main
By default, application-dev.properties will be used as the configuration file
Deployment The deployment of SOFARegistry relies on mysql, which uses mysql as the metadata storage of the registry itself SOFARegistry supports two types of deployment modes, which are integrated deployment and independent deployment. This topic describes the simplest integrated single-node deployment.</description>
    </item>
    
    <item>
      <title>Service Registry extension guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-extension-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-extension-guide/</guid>
      <description>If you want to extend a registry center, you should take a look at the abstract classes of the registry center.
package com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List&amp;lt;ProviderConfig&amp;gt; configs); public abstract List&amp;lt;ProviderGroup&amp;gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public abstract void batchUnSubscribe(List&amp;lt;ConsumerConfig&amp;gt; configs); }  You can see the main necessary interfaces.</description>
    </item>
    
    <item>
      <title>Service governance</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/governance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/governance/</guid>
      <description> SOFADashboard&amp;rsquo;s service governance mainly manages SOFARPC services.
Console The service governance console mainly provides two basic functions: service name query and service information display. When you click the hyperlink of a service ID, you are redirected to the details page of the service.
Service provider details page Service consumer details page </description>
    </item>
    
    <item>
      <title>Service publishing and reference</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/publish-and-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/publish-and-reference/</guid>
      <description>The basic configuration for SOFARPC service publishing and reference is described in the &amp;ldquo;Programming Interface&amp;rdquo; chapter. Here are some of the features of service publishing and referencing.
One service publishes multiple protocols In SOFARPC, a service can be published as multiple protocols, which allows the callers to call the service provider using different protocols.
If you use the Java API, you can build multiple ServerConfigs as follows to set different protocols for different ServerConfigs and then assign these ServerConfigs to ProviderConfig:</description>
    </item>
    
    <item>
      <title>Service publishing and reference in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/rpc-config-xml-explain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/rpc-config-xml-explain/</guid>
      <description>This document describes the complete SOFARPC service publishing and reference in the SOFABoot environment. Publish service &amp;lt;bean id=&amp;quot;helloSyncServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;helloSyncServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncService&amp;quot; unique-id=&amp;quot;&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs registry=&amp;quot;&amp;quot; serialize-type=&amp;quot;&amp;quot; filter=&amp;quot;&amp;quot; timeout=&amp;quot;3000&amp;quot; thread-pool-ref=&amp;quot;&amp;quot; warm-up-time=&amp;quot;60000&amp;quot; warm-up-weight=&amp;quot;10&amp;quot; weight=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;sofa:binding.rest&amp;gt; &amp;lt;/sofa:binding.rest&amp;gt; &amp;lt;/sofa:service&amp;gt; Attribute Name Default value Comment id ID bean名 class Class None ref Service interface implementation class interface Service interface (unique identifier) Use actual interface class for both normal calls</description>
    </item>
    
    <item>
      <title>Skywalking</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/skywalking-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/skywalking-usage/</guid>
      <description>Since SOFARPC 5.4.0, the link analysis feature of Skywalking is supported. You can use it as needed. The Skywalking must be 6.0.0-alpha and above.
This document does not cover the backend deployment. If you need it, please refer to the official Skywalking documentation.
Install Java agent  Locate the agent directory in the downloaded Skywalking release package.
 Set agent.service_name in config/agent.config, which can be any English character. Generally, it can be your own system name.</description>
    </item>
    
    <item>
      <title>Spring MVC Integration</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/usage-of-mvc/</guid>
      <description>In this document will demonstrate how to use SOFATracer to track of SpringMVC, this example address.
Assuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:
Introduce dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Project Configuration Then, add the parameters to be used by SOFATracer in the project&amp;rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.</description>
    </item>
    
    <item>
      <title>Spring MVC log</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-springmvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/log-format-springmvc/</guid>
      <description>SpringMVC Log Format After integrating SpringMVC, SOFATracer will output the link data format of the MVC requests, which is JSON by default.
Spring MVC digest log (spring-mvc-digest.log) Data is ouput in JSON format. The meaning of each key is as follows:
   Key Meaning     Time Log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.</description>
    </item>
    
    <item>
      <title>Terminologies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-ark-terminology/</guid>
      <description>Ark package The Executed Fat Jar that meets the specific directory format requirements can use the officially provided Maven plug-in (sofa-Ark-maven-plugin) to package the engineering application into a standard-format Ark package. Start the application on top of the SOFAArk container with the java -jar command. The Ark package usually contains the Ark Container, Ark Plugin dependency (if any), merged deployed Ark Biz (if any), and the Ark Biz of the application itself.</description>
    </item>
    
    <item>
      <title>Terminologies</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/explanation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/explanation/</guid>
      <description>Explanation of Terms    Terminology Description     TraceId TraceId refers to the ID that represents the unique request in SOFATracer. This ID is generally generated by the first system in the cluster that processes the request and is passed over the network to the next requested system in distributed calls.   SpanId SpanId represents the location or level of the request in the entire call link.</description>
    </item>
    
    <item>
      <title>Terminology</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/terminology/</guid>
      <description>General terminology    Term Description     Service A software function provided over the network with specific business logic processing capabilities.   Service provider A computer node that provides services over the network.   Service consumer A computer node that receives services through the network. The same computer node can both be the service provider of some services and the service consumer of others.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/test/</guid>
      <description>Unit test Place the unit test cases in the modules developed by yourself.
If the cases rely on a third-party server (such as ZooKeeper), you must manually add the profile. See the registry-zookeeper module code.
If the cases rely on other modules and integration test is required, place them in the test/test-intergrated module.
If the cases also rely on a third-party server (such as ZooKeeper), place them in the test-intergrated-3rd module.</description>
    </item>
    
    <item>
      <title>Timeout control</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/bolt-timeout/</guid>
      <description>When using the Bolt protocol for communication, invoke timeout defaults is 3 seconds. You can configure the timeout when referencing the service, and can also configure the timeout period from the dimension of service or method respectively. SOFARPC timeout can be set in milliseconds.
Service If you need to set the timeout from the dimension of service when publishing a service, just configure the timeout parameter to the corresponding value.</description>
    </item>
    
    <item>
      <title>TraceId and spanId generation rule</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/traceid-generated-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-tracer/traceid-generated-rule/</guid>
      <description>TraceId generation rule SOFATracer uses TraceId to concatenate the call logs of a request on each server. The TraceId is typically generated by the first server that receives the request. The generation rule is: server IP + generated time + incremental sequence + current process ID, such as:
0ad1348f1403169275002100356696   The first 8 digits 0ad1348f is the IP of the machine that generates TraceId. This is a hexadecimal number, in which every two digits represents a part of IP.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/tracing-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/tracing-usage/</guid>
      <description>By default, SOFARPC has integrated SOFATracer. Also, you can use other APM products, such as Skywalking, to achieve the corresponding functions. For details, see the relevant documents:
 SOFATracer Skywalking  If you want to disable the tracing ability of SOFARPC, you can do it in two ways.
If you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment, you can add a configuration com.alipay.sofa.rpc.defaultTracer= in application.properties.
If you are using sofa-rpc-all directly, you can add the following code in the main method of your application before publish any SOFARPC service or create any SOFARPC reference.</description>
    </item>
    
    <item>
      <title>Use API</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-api/</guid>
      <description>Use client API In the design of SOFALookout client, API is decoupled from the implementation. If you need to log the events based on the SOFALookout API, you only need to add the lookout-api Maven dependency to the pom.xml file in your application/project. If the dependencies (such as client dependencies or SOFABoot (Spring Boot) Starter) do not exist, the API package uses NoopRegistry automatically, to replace all the locations of which the events are logged.</description>
    </item>
    
    <item>
      <title>Use API in non-Spring environment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-rpc/</guid>
      <description>SOFARPC Service publishing The process of service publishing involves three classes RegistryConfig, ServerConfig, ProviderConfig.
 RegistryConfig
RegistryConfig registryConfig = new RegistryConfig() .setProtocol(&amp;quot;zookeeper&amp;quot;) .setAddress(&amp;quot;127.0.0.1:2181&amp;quot;)  RegistryConfig represents the registry center. As above, the address and port of the service registry center is 127.0.0.1:2181, and the protocol is Zookeeper.
 ServerConfig java ServerConfig serverConfig = new ServerConfig() .setPort(8803) .setProtocol(&amp;quot;bolt&amp;quot;);    ServerConfig represents the container where service runs. The above declares a server using the 8803 port and the bolt protocol.</description>
    </item>
    
    <item>
      <title>Use Docker to get started with Istio</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/</guid>
      <description>This article describes how to quickly start installing and configuring Istio by using Docker Compose.
SOFAMosn can not only support the standard Istio deployment mode, but also support the unilateral Inbound Sidecar or Outbound Sidecar deployment mode to meet the various requirements of users.
Prerequisites  Docker Docker Compose  Install Istio  Download the latest release package. Unzip the installation file and go to the decompressed path. The installation path contains:  Sample application path samples/.</description>
    </item>
    
    <item>
      <title>Use Jarslink for multi-application dynamic deployment</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/</guid>
      <description>Introduction This section is intended to demonstrate how to use Jarslink 2.0 to dynamically control the life cycle of the Biz package and to complete its installation, uninstallation, and query.
Demo With reference to How to reform common Spring Boot applications, the reformed spring-boot-transform-sample project has integrated the Jarslink 2.0 component. By executing the Ark package that the application packaged and generated, you can dynamically install or uninstall the application during its running.</description>
    </item>
    
    <item>
      <title>Use MOSN to build Service Mesh platform</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-with-sofamesh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/mosn/quick-start-run-with-sofamesh/</guid>
      <description>This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:
 Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio.</description>
    </item>
    
    <item>
      <title>Use MOSN to build Service Mesh platform</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-run-with-sofamesh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/occlum/quick-start-run-with-sofamesh/</guid>
      <description>This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:
 Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio.</description>
    </item>
    
    <item>
      <title>Use Registry</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-lookout/use-guide-registry/</guid>
      <description>Use Registry Different Registry integrations provide different ways to access Metrics.
1. LookoutRegistry Provides the ability to count metrics by a time window. It is divided into two modes: “active” and “passive”. The passive mode is off currently.
(1) Active mode
 You can specify the IP address of the remote agent through [Client Configuration], that is, check when start reporting, and regularly report data.
(2) Passive mode
 This mode can be activated through [Client Configuration], and HTTP service is provided on port 19399.</description>
    </item>
    
    <item>
      <title>Use XML in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-xml/</guid>
      <description>XML mode Declare the xsd file of SOFABoot: In the XML configuration file to be used, configure the declaration of the header xsd file to the followings. This enables development using the XML elements defined by SOFABoot.
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www .w3.org/2001/XMLSchema-instance&amp;quot; xmlns:sofa=&amp;quot;http://sofastack.io/schema/sofaboot&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation =&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://sofastack.io/schema/sofaboot http://sofastack .io/schema/sofaboot.xsd&amp;quot;  The way to publish and reference services in xml mode is as follows. sofa:service represents publishing service, and sofa:reference represents referencing service.</description>
    </item>
    
    <item>
      <title>Use annotation in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-annotation/</guid>
      <description>Use annotation for service publishing/reference In addition to the regular xml mode, it is also supported to publish and reference services with annotation in the SOFABoot environment. Similar to xml, we provide @SofaService and @SofaReference as well as @SofaServiceBinding and @SofaReferenceBinding annotation for multi-protocol.
Service publishing To publish an RPC service, you only need to add a @SofaService annotation on the bean to specify the interface and protocol type.</description>
    </item>
    
    <item>
      <title>Use case of a counter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/counter-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-jraft/counter-example/</guid>
      <description>This topic mainly describes a JRaft-based distributed counter.
Scenario Save a distributed counter in a raft group of multiple nodes (servers). The counter can increment and be called while remaining consistent among all nodes. The counter can normally provide two external services when a minority of nodes fail:
 incrmentAndGet(delta): increments the value of delta and returns the incremented value. get(): gets the latest value.  Remote procedure calls (RPCs) JRaft adopts the Bolt communication framework at the underlayer, and defines two requests:</description>
    </item>
    
    <item>
      <title>Use class isolation in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/classloader-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/classloader-isolation/</guid>
      <description>SOFABoot provides a class isolation framework SOFAArk, giving Spring Boot a class isolation ability to resolve class or package conflicts in the development. For detailed information, please refer to:SOFAArk
To use this feature in SOFABoot projects, we need only two steps: configure the sofa-ark-maven-plugin plugins for packaging and add sofa-ark-springboot-starter dependencies of the class isolation framework.
Configure Maven packaging plugins The Maven plugins - sofa-ark-maven-plugin are available on the Central Repository.</description>
    </item>
    
    <item>
      <title>Use dynamic API in SOFABoot</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/programing-sofa-boot-api/</guid>
      <description>Use API SOFABoot provides a set of programming APIs for RPC service publishing and reference. It is convenient to publish and reference RPC services directly in the code. Similar to Spring&amp;rsquo;s ApplicationContextAware, in order to use the programming API, you first need to implement the ClientFactoryAware interface to get the programming component API:
public class ClientFactoryBean implements ClientFactoryAware { private ClientFactory clientFactory; @Override public void setClientFactory(ClientFactory clientFactory) { this.clientFactory = clientFactory; } }  With DirectService as an example, see how to use the clientFactory to publish an RPC service through the programming API:</description>
    </item>
    
    <item>
      <title>User guide</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-handbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-bolt/sofa-bolt-handbook/</guid>
      <description>User guide Maven coordinator &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   Check release notes for the version information.
 1. Basic functions 1.1. Implement user request processor (UserProcessor) We provide two types of user request processors: SyncUserProcessor and AsyncUserProcessor. The difference between them is that the former returns the processing result in the form of a return value in the current processor thread, while the latter has an AsyncContext stub and can call the sendResponsemethod in the current thread or an asynchronous thread to return the processing result.</description>
    </item>
    
    <item>
      <title>Version release</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/sofa-jarslink-version/</guid>
      <description>﻿## Version release
Version No. Major, minor, and revision version numbers are used. For example 2.0.0.
Refer to: http://semver.org/lang/zh-CN/.
 Major version number: All versions within a major version number must be compatible with each other. They are not necessarily compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, more features it has. Revision version number: represents the BugFix version.</description>
    </item>
    
    <item>
      <title>Version release</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/version-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/version-release/</guid>
      <description>Version number The system adopts a three-digit versioning scheme. The three digits respectively are major version number, minor version number, and revision number, for example: 5.1.2.
For more information, see the http://semver.org/lang/zh-CN/.
 Major version number: All versions in the major version number must be compatible with each other. It is not necessary to be fully compatible with other major version numbers, but it is best to have backward compatibility.</description>
    </item>
    
    <item>
      <title>Version rules</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/version-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-dashboard/version-rule/</guid>
      <description>Version number Major, minor, and revision version numbers are used. For example, 1.0.0.
For more information, see https://semver.org/
 Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has.</description>
    </item>
    
    <item>
      <title>Version rules</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-standard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-registry/release-standard/</guid>
      <description>Version number SOFARegistry uses a three-digit version number in the form of major, minor, and patch. For example, 5.2.0.
For more information, see https://semver.org/.
 Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has.</description>
    </item>
    
    <item>
      <title>View version</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/view-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-boot/view-versions/</guid>
      <description>﻿With SOFABoot, we can directly view the version of SOFA middleware and other detailed information in the browser.
Introducing SOFABoot Infra Dependency To view the version information of the SOFA middleware directly in the browser in SOFABoot, all you need to do is add the following to the Maven dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;infra-sofa-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  Version Information Viewing After an application started successfully, you can visit http://localhost:8080/sofaboot/versions in the browser to view the version information of the SOFA middleware, the response such as:</description>
    </item>
    
    <item>
      <title>Warm-up weight</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/provider-warmup-weight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/provider-warmup-weight/</guid>
      <description>The warm-up weight feature allows the client machine to distribute traffic based on the corresponding weight of the server. This feature is also often used in the scenario where a few machines within a cluster are being started. The server machines can be warmed up in a short time with the traffic weight function, and then continue to receive the normal traffic.
The operating mechanism is as follows:  When the server service starts, it pushes its own warm-up duration, weight during warm-up, and normal weight after warm-up to the Service Registry.</description>
    </item>
    
    <item>
      <title>X-Protocol</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-x-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-x-protocol/</guid>
      <description>X-Protocol X-Protocol is a special common protocol supported by SOFAMesh. It can access different RPC protocols in a unified manner. Because it doesn&amp;rsquo;t require to parse protocols, it can not only provide higher performance, but also reduce the development cost of accessing new protocols.</description>
    </item>
    
    <item>
      <title>ZooKeeper Adapter</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-zookeeper-adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-mesh/pilot-zookeeper-adapter/</guid>
      <description>ZooKeeper Adapter ZooKeeper Adapter is an Adapter plug-in developed in accordance with the Istio registry center extension mechanism. It is used for docking all microservices frameworks that use ZooKeeper as a registry center. Currently, ZooKeeper Adapter supports SOFARPC and will be available for Dubbo soon.
ZooKeeper Adapter uses ZooKeeper&amp;rsquo;s watch mechanism to listen to the change events of service registration information, providing better real-time performance than polling.</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sofastack.github.io/sofastack.tech/en/projects/sofa-rpc/registry-zookeeper/</guid>
      <description>To use Zookeeper as service registry center, you only need to configure it in application.properties as follows:
com.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181  Note: Considering the real-time nature of the service, the following features are not supported currently.
SOFABoot RPC also provides a cache file (not supported currently), which is used for service discovery when ZooKeeper is not available. The way to configure this cache file is as follows:
com.alipay.sofa.rpc.registry.address=zookeeper://xxx:2181?file=/home/admin/registry  Zookeeper Auth When users need to auth the providers and consumers, they can use a auth key to write or read the dictionary normally, only when they use the same key, zookeeper server will process these requests.</description>
    </item>
    
  </channel>
</rss>